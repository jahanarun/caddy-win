version: "3.5"

networks:
  transit_zero-net:
    driver: macvlan
    driver_opts:
      parent: eth0
      name: macvlan_zero
    ipam:
      config:
        - subnet: 10.100.0.0/24
          gateway: ${TRANSIT0_GATEWAY_IP_ADDRESS}
          ip_range: 10.100.0.0/29        # 10.100.0.48 - 10.100.0.51
  things-net:
    driver: macvlan # Otherwise PiHole container cannot resolve DNS internally due to NAT issue within Docker
    driver_opts:
      parent: eth0.${THINGS_VLAN_ID}
      name: macvlan${THINGS_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${THINGS_VLAN_ID}.0/24
          gateway: ${THINGS_GATEWAY_IP_ADDRESS}
  quantum-net:
    driver: macvlan # Otherwise PiHole container cannot resolve DNS internally due to NAT issue within Docker
    driver_opts:
      parent: eth0.${QUANTUM_VLAN_ID}
      name: macvlan${QUANTUM_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${QUANTUM_VLAN_ID}.0/24
          gateway: ${QUANTUM_GATEWAY_IP_ADDRESS}

services:
  http-server:
    image: jhnrn/http-server-linux:latest
    container_name: "http-server"
    restart: always
    ports:
      - "3000:3000"

  omada-controller:
    container_name: omada-controller
    image: mbentley/omada-controller:5.9
    restart: unless-stopped
    stop_grace_period: 60s
    environment:
      - PUID=508
      - PGID=508
      - MANAGE_HTTP_PORT=8088
      - MANAGE_HTTPS_PORT=8043
      - PORTAL_HTTP_PORT=8088
      - PORTAL_HTTPS_PORT=8843
      - PORT_APP_DISCOVERY=27001
      - PORT_ADOPT_V1=29812
      - PORT_UPGRADE_V1=29813
      - PORT_MANAGER_V1=29811
      - PORT_MANAGER_V2=29814
      - PORT_DISCOVERY=29810
      - SHOW_SERVER_LOGS=true
      - SHOW_MONGODB_LOGS=false
      - SSL_CERT_NAME=tls.crt
      - SSL_KEY_NAME=tls.key
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/omada/data:/opt/tplink/EAPController/data
      - ${DATA_STORAGE}/omada/logs:/opt/tplink/EAPController/logs
    networks:
      transit_zero-net:
        ipv4_address: ${OMADA_IP_ADDRESS} 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.omada.rule=Host(`omada.${DOMAIN}`)"
      - "traefik.http.routers.omada.tls.certresolver=certificato"
      - "traefik.http.services.omada.loadbalancer.server.port=8043"

  mdns:
    image: jhnrn/avahi
    hostname: mdns
    container_name: mdns
    environment:
      - REFLECTOR_ENABLE_REFLECTOR=yes
    restart: unless-stopped
    networks:
      things-net:
        ipv4_address: ${AVAHI_THINGS_IP_ADDRESS}
      quantum-net:
        ipv4_address: ${AVAHI_QUANTUM_IP_ADDRESS}

  cloudflared-dnsproxy-things:
    image: jhnrn/cloudflared:latest
    container_name: "cloudflared-dnsproxy-${THINGS_VLAN_NAME}"
    command: proxy-dns
    restart: always
    environment:
      TZ: ${TZ}    
      TUNNEL_METRICS: "0.0.0.0:49312"
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      TUNNEL_DNS_PORT: ${TUNNEL_DNS_PORT}
      TUNNEL_DNS_UPSTREAM: ${TUNNEL_DNS_UPSTREAM}
    networks:
      things-net:
        ipv4_address: ${THINGS_CLOUDFLARED_DNSPROXY_IPADDR}
    healthcheck:
      # test: dig +short @127.0.0.1 -p${TUNNEL_DNS_PORT} bing.com AAAA || exit 1
      test: 'curl --http2 -H "accept: application/dns-json" "https://1.1.1.1/dns-query?name=cloudflare.com"  || exit 1'
      interval: 30s
      timeout: 5s
      retries: 2
    labels:
      - autoheal=true

  pihole-things:
    container_name: pihole-${THINGS_VLAN_NAME}
    hostname: pihole-${THINGS_VLAN_NAME}
    image: pihole/pihole:dev
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
      DNS1: ${THINGS_CLOUDFLARED_DNSPROXY_IPADDR}#${TUNNEL_DNS_PORT}
      DNS2: no # Explicitly disable a second DNS server, otherwise Pi-hole uses Google
      # Listen on all interfaces and permit all origins
      # This allows Pihole to work in this setup and when answering across VLANS,
      # but do not expose pi-hole to the internet!
      DNSMASQ_LISTENING: all
    # Volumes store your data between container upgrades
    volumes:
      - ${DATA_STORAGE}/pihole/${THINGS_VLAN_NAME}/pihole:/etc/pihole
      - ${DATA_STORAGE}/pihole/${THINGS_VLAN_NAME}/dnsmasq.d:/etc/dnsmasq.d
      - ${DATA_STORAGE}/pihole/global/custom.list:/etc/pihole/custom.list
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    networks:
      things-net:
        ipv4_address: ${THINGS_PIHOLE_IP_ADDRESS}
    dns:
      - 127.0.0.1        
    restart: unless-stopped
    depends_on:
      - cloudflared-dnsproxy-things
    labels:
      - homepage.group=Network
      - homepage.weight=1
      - homepage.name=Pihole-${THINGS_VLAN_NAME}
      - homepage.icon=pihole.png
      - homepage.href=http://${THINGS_PIHOLE_IP_ADDRESS}/admin
      - homepage.description=Pihole for ${THINGS_VLAN_NAME}
      - homepage.widget.type=pihole
      - homepage.widget.key=${PIHOLE_TOKEN}
      - homepage.widget.url=http://${THINGS_PIHOLE_IP_ADDRESS}
      - homepage.widget.fields=["queries", "blocked", "gravity"]

  cloudflared-dnsproxy-quantum:
    image: jhnrn/cloudflared:latest
    container_name: "cloudflared-dnsproxy-${QUANTUM_VLAN_NAME}"
    command: proxy-dns
    restart: always
    environment:
      TZ: ${TZ}    
      TUNNEL_METRICS: "0.0.0.0:49312"
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      TUNNEL_DNS_PORT: ${TUNNEL_DNS_PORT}
      TUNNEL_DNS_UPSTREAM: ${TUNNEL_DNS_UPSTREAM}
    networks:
      quantum-net:
        ipv4_address: ${QUANTUM_CLOUDFLARED_DNSPROXY_IPADDR}
    healthcheck:
      # test: dig +short @127.0.0.1 -p${TUNNEL_DNS_PORT} bing.com AAAA || exit 1
      test: 'curl --http2 -H "accept: application/dns-json" "https://1.1.1.1/dns-query?name=cloudflare.com"  || exit 1'
      interval: 30s
      timeout: 5s
      retries: 2
    labels:
      - autoheal=true

  pihole-quantum:
    container_name: pihole-${QUANTUM_VLAN_NAME}
    hostname: pihole-${QUANTUM_VLAN_NAME}
    image: pihole/pihole:dev
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
      DNS1: ${QUANTUM_CLOUDFLARED_DNSPROXY_IPADDR}#${TUNNEL_DNS_PORT}
      DNS2: no # Explicitly disable a second DNS server, otherwise Pi-hole uses Google
      # Listen on all interfaces and permit all origins
      # This allows Pihole to work in this setup and when answering across VLANS,
      # but do not expose pi-hole to the internet!
      DNSMASQ_LISTENING: all
    # Volumes store your data between container upgrades
    volumes:
      - ${DATA_STORAGE}/pihole/${QUANTUM_VLAN_NAME}/pihole:/etc/pihole
      - ${DATA_STORAGE}/pihole/${QUANTUM_VLAN_NAME}/dnsmasq.d:/etc/dnsmasq.d
      - ${DATA_STORAGE}/pihole/global/custom.list:/etc/pihole/custom.list
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    networks:
      quantum-net:
        ipv4_address: ${QUANTUM_PIHOLE_IP_ADDRESS}
    dns:
      - 127.0.0.1        
    restart: unless-stopped
    depends_on:
      - cloudflared-dnsproxy-quantum
    labels:
      - homepage.group=Network
      - homepage.weight=1
      - homepage.name=Pihole-${QUANTUM_VLAN_NAME}
      - homepage.icon=pihole.png
      - homepage.href=http://${QUANTUM_PIHOLE_IP_ADDRESS}/admin
      - homepage.description=Pihole for ${QUANTUM_VLAN_NAME}
      - homepage.widget.type=pihole
      - homepage.widget.key=${PIHOLE_TOKEN}
      - homepage.widget.url=http://${QUANTUM_PIHOLE_IP_ADDRESS}
      - homepage.widget.fields=["queries", "blocked", "gravity"]