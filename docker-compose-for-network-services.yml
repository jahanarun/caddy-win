version: "3.5"

networks:
  transit_zero-net:
    driver: macvlan
    driver_opts:
      parent: eth0 # soon changes to eth0.1
      name: macvlan1 # soon changes to macvlan1
    ipam:
      config:
        - subnet: 10.100.0.0/24
          gateway: ${TRANSIT0_GATEWAY_IP_ADDRESS}
          ip_range: 10.100.0.0/29        # 10.100.0.48 - 10.100.0.51

  transit20-net:
    driver: ipvlan
    driver_opts:
      ipvlan_mode: l2
      parent: eth0.20
      name: things-network
    ipam:
      config:
        - subnet: 10.100.20.0/24
          gateway: 10.100.20.2

  transit30-net:
    driver: ipvlan
    driver_opts:
      ipvlan_mode: l2
      parent: eth0.30
      name: quantum-network
    ipam:
      config:
        - subnet: 10.100.30.0/24
          gateway: 10.100.30.2

  transit80-net:
    driver: ipvlan
    driver_opts:
      ipvlan_mode: l2
      parent: eth0.80
      name: metal-network
    ipam:
      config:
        - subnet: 10.100.80.0/24
          gateway: 10.100.80.2          
services:
  http-server:
    image: jhnrn/http-server-linux:latest
    container_name: "http-server"
    restart: always
    ports:
      - "3000:3000"

  omada-controller:
    container_name: omada-controller
    image: mbentley/omada-controller:5.9
    restart: unless-stopped
    stop_grace_period: 60s
    environment:
      - PUID=508
      - PGID=508
      - MANAGE_HTTP_PORT=8088
      - MANAGE_HTTPS_PORT=8043
      - PORTAL_HTTP_PORT=8088
      - PORTAL_HTTPS_PORT=8843
      - PORT_APP_DISCOVERY=27001
      - PORT_ADOPT_V1=29812
      - PORT_UPGRADE_V1=29813
      - PORT_MANAGER_V1=29811
      - PORT_MANAGER_V2=29814
      - PORT_DISCOVERY=29810
      - SHOW_SERVER_LOGS=true
      - SHOW_MONGODB_LOGS=false
      - SSL_CERT_NAME=tls.crt
      - SSL_KEY_NAME=tls.key
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/omada/data:/opt/tplink/EAPController/data
      - ${DATA_STORAGE}/omada/logs:/opt/tplink/EAPController/logs
    networks:
      transit_zero-net:
        ipv4_address: ${OMADA_IP_ADDRESS} 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.omada.rule=Host(`omada.${DOMAIN}`)"
      - "traefik.http.routers.omada.tls.certresolver=certificato"
      - "traefik.http.services.omada.loadbalancer.server.port=8043"

  cloudflared-dnsproxy:
    image: cloudflare/cloudflared:latest
    container_name: "cloudflared-dnsproxy-${VLAN_NAME}"
    hostname: cloudflared-dnsproxy
    command: proxy-dns
    restart: always
    environment:
      TZ: ${TZ}    
      TUNNEL_METRICS: "0.0.0.0:49312"
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      TUNNEL_DNS_PORT: ${TUNNEL_DNS_PORT}
      TUNNEL_DNS_UPSTREAM: "https://8.8.8.8/dns-query,https://1.1.1.1/dns-query,https://1.0.0.1/dns-query"
    networks:
      transit-net:

  pihole:
    container_name: pihole
    hostname: pihole
    image: pihole/pihole:dev
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    # ports:
      # - "53:53/tcp"
      # - "53:53/udp"
      # - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      # - "80:80/tcp"
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
      DNS1: cloudflared-dnsproxy#${TUNNEL_DNS_PORT}
      DNS2: no # Explicitly disable a second DNS server, otherwise Pi-hole uses Google
      # Listen on all interfaces and permit all origins
      # This allows Pihole to work in this setup and when answering across VLANS,
      # but do not expose pi-hole to the internet!
      DNSMASQ_LISTENING: all
    # Volumes store your data between container upgrades
    volumes:
      - ${DATA_STORAGE}/pihole/${VLAN_NAME}/pihole:/etc/pihole
      - ${DATA_STORAGE}/pihole/${VLAN_NAME}/dnsmasq.d:/etc/dnsmasq.d
      - ${DATA_STORAGE}/pihole/global/custom.list:/etc/pihole/custom.list
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    networks:
      transit-net:
      transit20-net:
        ipv4_address: 10.100.20.3
      transit30-net:
        ipv4_address: 10.100.30.3
      transit80-net:
        ipv4_address: 10.100.80.3
    restart: unless-stopped
    depends_on:
      - cloudflared-dnsproxy
    healthcheck:
      test: ping -c 1 ${GATEWAY_IP_ADDRESS} || exit 1
      # test: dig +short @127.0.0.1 pi.hole || exit 1
      interval: 3s
      retries: 5
