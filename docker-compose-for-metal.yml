version: "3.5"

networks:
  untrusted-net:
    internal: true

  vlan-net:
    driver: ipvlan
    driver_opts:
      parent: eth0.80
      name: ipvlan80
    ipam:
      config:
        - subnet: 10.100.80.0/24
          gateway: 10.100.80.1
  
services:
  http-server:
    image: jhnrn/http-server-linux:latest
    container_name: "http-server"
    restart: always
    ports:
      - "3000:3000"

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: "cloudflared"
    restart: always
    networks:
      vlan-net:
        ipv4_address: "10.100.80.41"
    command:
      - tunnel
      - --no-autoupdate
      - run 
      - --token
      - ${CLOUDFARED_TOKEN}

  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--api.dashboard=true"
      # - "--providers.file.directory=/FileProvider/"
      # - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      untrusted-net:
      vlan-net:
        ipv4_address: "10.100.80.55"      
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`reverseproxy.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro  
      - ${DATA_STORAGE}/certs:/letsencrypt
    restart: always

  plex-music:
    image: linuxserver/plex:latest
    container_name: plex-music
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`music.${DOMAIN}`)"
      # - "traefik.http.routers.plex.tls=true"
      # - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.tls.certresolver=certificato"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
    networks:
      vlan-net:
        ipv4_address: "10.100.80.40"      
    ports:
      - 32400:32400
    environment:
      - PLEX_UID=33
      - PLEX_GID=33
      - PUID=33
      - PGID=33
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - TZ=${TZ}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      - HOSTNAME=music.${DOMAIN}
    volumes:
      - ${DATA_STORAGE}/plex/config:/config
      - ${MUSIC}:/media/music
    restart: unless-stopped

  # openspeedtest:
  #   image: openspeedtest/latest
  #   container_name: openspeedtest
  #   restart: unless-stopped
  #   networks:
  #     - untrusted-net
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.openspeedtest.rule=Host(`speedtest.${DOMAIN}`)"
  #     - "traefik.http.routers.openspeedtest.tls.certresolver=certificato"
  #     - "traefik.http.services.openspeedtest.loadbalancer.server.port=3000"
  #     - "traefik.http.routers.openspeedtest.entrypoints: web"
  #     - "traefik.http.middlewares.limit.buffering.maxRequestBodyBytes: 10000000000"
  #     - "traefik.http.routers.openspeedtest.middlewares: limit"

  librespeed:
    image: adolfintel/speedtest
    container_name: librespeed
    restart: unless-stopped
    environment:
      - MODE=standalone
    networks:
      - untrusted-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librespeed.rule=Host(`speedtest.${DOMAIN}`)"
      - "traefik.http.routers.librespeed.tls.certresolver=certificato"
      - "traefik.http.services.librespeed.loadbalancer.server.port=80"

  speedtest-tracker:
    container_name: speedtest-tracker
    image: henrywhitaker3/speedtest-tracker
    volumes:
        - ${DATA_STORAGE}/speedtest-tracker:/config
    environment:
        - TZ=${TZ}
        - PGID=33
        - PUID=33
        - OOKLA_EULA_GDPR=true
    networks:
      untrusted-net:
      vlan-net:
    logging:
        driver: "json-file"
        options:
            max-file: "10"
            max-size: "200k"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.speedtest-tracker.rule=Host(`speedtracker.${DOMAIN}`)"
      - "traefik.http.routers.speedtest-tracker.tls.certresolver=certificato"
      - "traefik.http.services.speedtest-tracker.loadbalancer.server.port=80"
      - "traefik.docker.network=metal-services_untrusted-net"
      
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - TZ=${TZ}
      - PGID=33
      - PUID=33
    volumes:
      - ${DATA_STORAGE}/heimdall:/config
    networks:
      untrusted-net:
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.rule=Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.heimdall.tls.certresolver=certificato"
      - "traefik.http.services.heimdall.loadbalancer.server.port=80"

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
      - WEBUI_PORT=8220
    volumes:
      - ${DATA_STORAGE}/qbittorrent:/config
      - ${TORRENTS}:/downloads #optional
    networks:
      vlan-net:
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`torrent.${DOMAIN}`)"
      - "traefik.http.routers.qbittorrent.tls.certresolver=certificato"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8220"

  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
      - PORT=5055 #optional
    volumes:
      - ${DATA_STORAGE}/overseerr:/app/config
    restart: unless-stopped
    networks:
      - vlan-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.overseerr.rule=Host(`fetch.${DOMAIN}`)"
      - "traefik.http.routers.overseerr.tls.certresolver=certificato"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"

  omada-controller:
    container_name: omada-controller
    image: mbentley/omada-controller:5.8
    restart: unless-stopped
    stop_grace_period: 60s
    network_mode: host
    environment:
      - PUID=508
      - PGID=508
      - MANAGE_HTTP_PORT=8088
      - MANAGE_HTTPS_PORT=8043
      - PORTAL_HTTP_PORT=8088
      - PORTAL_HTTPS_PORT=8843
      - PORT_APP_DISCOVERY=27001
      - PORT_ADOPT_V1=29812
      - PORT_UPGRADE_V1=29813
      - PORT_MANAGER_V1=29811
      - PORT_MANAGER_V2=29814
      - PORT_DISCOVERY=29810
      - SHOW_SERVER_LOGS=true
      - SHOW_MONGODB_LOGS=false
      - SSL_CERT_NAME=tls.crt
      - SSL_KEY_NAME=tls.key
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/omada/data:/opt/tplink/EAPController/data
      - ${DATA_STORAGE}/omada/logs:/opt/tplink/EAPController/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.omada.rule=Host(`omada.${DOMAIN}`)"
      - "traefik.http.routers.omada.tls.certresolver=certificato"
      - "traefik.http.services.omada.loadbalancer.server.port=8843"

  dummy:
    image: alpine
    container_name: dummy
    entrypoint: tail -f /dev/null
    networks:
      vlan-net:
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.photoprism.rule=Host(`photoprism.${DOMAIN}`)"
      - "traefik.http.routers.photoprism.tls.certresolver=certificato"
      - "traefik.http.services.photoprism.loadbalancer.passHostHeader=true"
      - "traefik.http.services.photoprism.loadbalancer.server.port=443"
      - "traefik.http.services.photoprism.loadbalancer.server.url=https://${HEAVY_METAL_SERVER}"
      - "traefik.http.routers.test.rule=Host(`test.${DOMAIN}`)"
      - "traefik.http.routers.test.tls.certresolver=certificato"
      - "traefik.http.services.test.loadbalancer.server.port=443"
      - "traefik.http.services.test.loadbalancer.server.url=https://www.google.com"
