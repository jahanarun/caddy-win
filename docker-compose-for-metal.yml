version: "3.9"

networks:
  bridge-net:
  internal-net:
    internal: true
  01-transit_80-net:
    driver: macvlan
    driver_opts:
      parent: eth0
      name: macvlan80
    ipam:
      config:
        - subnet: 10.100.80.0/24
          gateway: ${GATEWAY_IP_ADDRESS}
          ip_range: 10.100.80.16/28        # 10.100.80.16 - 10.100.80.31

  transit_zero-net:
    driver: macvlan
    driver_opts:
      parent: eth1 # soon changes to eth0.1
      name: macvlan1 # soon changes to macvlan1
    ipam:
      config:
        - subnet: 10.100.0.0/24
          gateway: ${TRANSIT0_GATEWAY_IP_ADDRESS}
          ip_range: 10.100.0.48/30        # 10.100.0.48 - 10.100.0.51

services:
  cloudflared-dnsproxy-vpn:
    image: cloudflare/cloudflared:latest
    container_name: "cloudflared-dnsproxy-vpn"
    command: proxy-dns
    restart: always
    # network_mode: host
    environment:
      TZ: ${TZ}    
      TUNNEL_METRICS: "0.0.0.0:49312"
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      TUNNEL_DNS_PORT: ${TUNNEL_DNS_PORT}
      TUNNEL_DNS_UPSTREAM: "https://8.8.8.8/dns-query,https://1.1.1.1/dns-query,https://1.0.0.1/dns-query"
    networks:
      01-transit_80-net:
        ipv4_address: ${CLOUDFLARED_DNSPROXY_VPN_IPADDR}
    # healthcheck:
    #   test: dig +short @127.0.0.1 -p ${TUNNEL_DNS_PORT} cloudflare.com A || exit 1
    #   interval: 30s
    #   timeout: 20s
    #   start_period: 10s

  cloudflared-dnsproxy:
    image: cloudflare/cloudflared:latest
    container_name: "cloudflared-dnsproxy"
    command: proxy-dns
    restart: always
    environment:
      TZ: ${TZ}    
      TUNNEL_METRICS: "0.0.0.0:49312"
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      TUNNEL_DNS_PORT: ${TUNNEL_DNS_PORT}
      TUNNEL_DNS_UPSTREAM: "https://8.8.8.8/dns-query,https://1.1.1.1/dns-query,https://1.0.0.1/dns-query"
    networks:
      01-transit_80-net:
        ipv4_address: ${CLOUDFLARED_DNSPROXY_IPADDR}

  pihole:
    container_name: pihole
    hostname: pihole
    image: pihole/pihole:dev
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    # ports:
      # - "53:53/tcp"
      # - "53:53/udp"
      # - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      # - "80:80/tcp"
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
      DNS1: ${CLOUDFLARED_DNSPROXY_IPADDR}#${TUNNEL_DNS_PORT}
      DNS2: no # Explicitly disable a second DNS server, otherwise Pi-hole uses Google
      # Listen on all interfaces and permit all origins
      # This allows Pihole to work in this setup and when answering across VLANS,
      # but do not expose pi-hole to the internet!
      DNSMASQ_LISTENING: all
    # Volumes store your data between container upgrades
    volumes:
      - ${DATA_STORAGE}/pihole/default/pihole:/etc/pihole
      - ${DATA_STORAGE}/pihole/default/dnsmasq.d:/etc/dnsmasq.d
      - ${DATA_STORAGE}/pihole/custom.list:/etc/pihole/custom.list
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    # cap_add:
      # - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    networks:
      01-transit_80-net:
        ipv4_address: ${PIHOLE_IP_ADDRESS}
    restart: unless-stopped
    depends_on:
      - cloudflared-dnsproxy
    healthcheck:
      test: ping -c 1 ${GATEWAY_IP_ADDRESS} || exit 1
      interval: 3s
      retries: 5
  pihole-vpn:
    container_name: pihole-vpn
    hostname: pihole-vpn
    image: pihole/pihole:dev
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
      DNS1: ${CLOUDFLARED_DNSPROXY_VPN_IPADDR}#${TUNNEL_DNS_PORT}
      DNS2: no # Explicitly disable a second DNS server, otherwise Pi-hole uses Google
      DNSMASQ_LISTENING: all
    volumes:
      - ${DATA_STORAGE}/pihole/vpn/pihole:/etc/pihole
      - ${DATA_STORAGE}/pihole/vpn/dnsmasq.d:/etc/dnsmasq.d
      - ${DATA_STORAGE}/pihole/custom.list:/etc/pihole/custom.list
    networks:
      01-transit_80-net:
        ipv4_address: ${PIHOLE_VPN_IP_ADDRESS}
    restart: unless-stopped
    depends_on:
      - cloudflared-dnsproxy-vpn
    healthcheck:
      test: ping -c 1 ${GATEWAY_IP_ADDRESS} || exit 1
      interval: 3s
      retries: 5
  http-server:
    image: jhnrn/http-server-linux:latest
    container_name: "http-server"
    restart: always
    ports:
      - "3000:3000"
    networks:
      01-transit_80-net:
        ipv4_address: ${HTTP_SERVER_IP_ADDRESS}
    depends_on:
      - pihole

  omada-controller:
    container_name: omada-controller
    image: mbentley/omada-controller:5.9
    restart: unless-stopped
    stop_grace_period: 60s
    environment:
      - PUID=508
      - PGID=508
      - MANAGE_HTTP_PORT=8088
      - MANAGE_HTTPS_PORT=8043
      - PORTAL_HTTP_PORT=8088
      - PORTAL_HTTPS_PORT=8843
      - PORT_APP_DISCOVERY=27001
      - PORT_ADOPT_V1=29812
      - PORT_UPGRADE_V1=29813
      - PORT_MANAGER_V1=29811
      - PORT_MANAGER_V2=29814
      - PORT_DISCOVERY=29810
      - SHOW_SERVER_LOGS=true
      - SHOW_MONGODB_LOGS=false
      - SSL_CERT_NAME=tls.crt
      - SSL_KEY_NAME=tls.key
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/omada/data:/opt/tplink/EAPController/data
      - ${DATA_STORAGE}/omada/logs:/opt/tplink/EAPController/logs
    networks:
      transit_zero-net:
        ipv4_address: ${OMADA_IP_ADDRESS} 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.omada.rule=Host(`omada.${DOMAIN}`)"
      - "traefik.http.routers.omada.tls.certresolver=certificato"
      - "traefik.http.services.omada.loadbalancer.server.port=8043"

  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--api.dashboard=true"
      # - "--providers.file.directory=/FileProvider/"
      # - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      internal-net:
      bridge-net:
      01-transit_80-net:
        ipv4_address: ${TRAEFIK_IP_ADDRESS}      
    dns:
      - ${DNS_IP_ADDRESS}
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`reverseproxy.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - "traefik.docker.network=metal-services_01-transit_80-net"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro  
      - ${DATA_STORAGE}/certs:/letsencrypt
    restart: always

  cloudflared-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: "cloudflared-tunnel"
    hostname: cloudflared-tunnel
    restart: always
    networks:
      01-transit_80-net:
        ipv4_address: ${CLOUDFLARED_TUNNEL_IP_ADDRESS}
    dns:
      - ${DNS_IP_ADDRESS}
    command:
      - tunnel
      - --no-autoupdate
      - run 
      - --token
      - ${CLOUDFARED_TOKEN}
    depends_on:
      - traefik

  plex-music:
    image: linuxserver/plex:latest
    hostname: plex-music
    container_name: plex-music
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`music.${DOMAIN}`)"
      # - "traefik.http.routers.plex.tls=true"
      # - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.tls.certresolver=certificato"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
    networks:
      01-transit_80-net:
        ipv4_address: ${PLEXMUSIC_IP_ADDRESS}
    dns:
      - ${DNS_IP_ADDRESS}
    environment:
      - PLEX_UID=33
      - PLEX_GID=33
      - PUID=33
      - PGID=33
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - TZ=${TZ}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      - HOSTNAME=music.${DOMAIN}
    volumes:
      - ${DATA_STORAGE}/plex/config:/config
      - ${MUSIC}:/media/music
    restart: unless-stopped
    depends_on:
      - traefik

  librespeed:
    image: adolfintel/speedtest
    hostname: librespeed
    container_name: librespeed
    restart: unless-stopped
    environment:
      - MODE=standalone
    networks:
      - internal-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librespeed.rule=Host(`speedtest.${DOMAIN}`)"
      - "traefik.http.routers.librespeed.tls.certresolver=certificato"
      - "traefik.http.services.librespeed.loadbalancer.server.port=80"
    depends_on:
      - traefik

  speedtest-tracker:
    container_name: speedtest-tracker
    hostname: speedtest-tracker
    image: henrywhitaker3/speedtest-tracker
    volumes:
        - ${DATA_STORAGE}/speedtest-tracker:/config
    environment:
        - TZ=${TZ}
        - PGID=33
        - PUID=33
        - OOKLA_EULA_GDPR=true
    networks:
      bridge-net:
    logging:
        driver: "json-file"
        options:
            max-file: "10"
            max-size: "200k"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.speedtest-tracker.rule=Host(`speedtracker.${DOMAIN}`)"
      - "traefik.http.routers.speedtest-tracker.tls.certresolver=certificato"
      - "traefik.http.services.speedtest-tracker.loadbalancer.server.port=80"
    depends_on:
      - traefik
      
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    hostname: heimdall
    container_name: heimdall
    environment:
      - TZ=${TZ}
      - PGID=33
      - PUID=33
    volumes:
      - ${DATA_STORAGE}/heimdall:/config
    networks:
      internal-net:
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.rule=Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.heimdall.tls.certresolver=certificato"
      - "traefik.http.services.heimdall.loadbalancer.server.port=80"
    depends_on:
      - traefik

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    hostname: qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
      - WEBUI_PORT=8220
    volumes:
      - ${DATA_STORAGE}/qbittorrent:/config
      - ${TORRENTS}:/downloads #optional
    networks:
      01-transit_80-net:
        ipv4_address: ${QBITTORRENT_IP_ADDRESS}
    dns:
      - ${DNS_IP_ADDRESS}
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`torrent.${DOMAIN}`)"
      - "traefik.http.routers.qbittorrent.tls.certresolver=certificato"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8220"
    depends_on:
      - traefik

  overseerr:
    image: sctx/overseerr:latest
    hostname: overseerr
    container_name: overseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
      - PORT=5055 #optional
    volumes:
      - ${DATA_STORAGE}/overseerr:/app/config
    restart: unless-stopped
    networks:
      - 01-transit_80-net
    dns:
      - ${DNS_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.overseerr.rule=Host(`fetch.${DOMAIN}`)"
      - "traefik.http.routers.overseerr.tls.certresolver=certificato"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"
    depends_on:
      - traefik
