version: "3.9"

networks:
  internal-net:
    internal: true
  transit-net:
    driver: macvlan # Otherwise PiHole container cannot resolve DNS internally due to NAT issue within Docker
    # driver: ipvlan
    driver_opts:
      # ipvlan_mode: l2
      parent: eth0.${VLAN_ID}
      name: macvlan${VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${VLAN_ID}.0/24
          gateway: ${GATEWAY_IP_ADDRESS}

services:
  cloudflared-dnsproxy:
    image: cloudflare/cloudflared:latest
    container_name: "cloudflared-dnsproxy-${VLAN_NAME}"
    command: proxy-dns
    restart: always
    environment:
      TZ: ${TZ}    
      TUNNEL_METRICS: "0.0.0.0:49312"
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      TUNNEL_DNS_PORT: ${TUNNEL_DNS_PORT}
      TUNNEL_DNS_UPSTREAM: "https://8.8.8.8/dns-query,https://1.1.1.1/dns-query,https://1.0.0.1/dns-query"
    networks:
      transit-net:
        ipv4_address: ${CLOUDFLARED_DNSPROXY_IPADDR}

  pihole:
    container_name: pihole-${VLAN_NAME}
    hostname: pihole-${VLAN_NAME}
    image: pihole/pihole:dev
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    # ports:
      # - "53:53/tcp"
      # - "53:53/udp"
      # - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      # - "80:80/tcp"
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
      DNS1: ${CLOUDFLARED_DNSPROXY_IPADDR}#${TUNNEL_DNS_PORT}
      DNS2: no # Explicitly disable a second DNS server, otherwise Pi-hole uses Google
      # Listen on all interfaces and permit all origins
      # This allows Pihole to work in this setup and when answering across VLANS,
      # but do not expose pi-hole to the internet!
      DNSMASQ_LISTENING: all
    # Volumes store your data between container upgrades
    volumes:
      - ${DATA_STORAGE}/pihole/${VLAN_NAME}/pihole:/etc/pihole
      - ${DATA_STORAGE}/pihole/${VLAN_NAME}/dnsmasq.d:/etc/dnsmasq.d
      - ${DATA_STORAGE}/pihole/global/custom.list:/etc/pihole/custom.list
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    networks:
      transit-net:
        ipv4_address: ${PIHOLE_IP_ADDRESS}
    restart: unless-stopped
    depends_on:
      - cloudflared-dnsproxy
    healthcheck:
      test: ping -c 1 bing.com || exit 1
      # test: dig +short @127.0.0.1 pi.hole || exit 1
      interval: 30s
      retries: 5
    labels:
      - homepage.group=Network
      - homepage.name=Pihole-${VLAN_NAME}
      - homepage.icon=pihole.png
      - homepage.href=http://${PIHOLE_IP_ADDRESS}/admin
      - homepage.description=Pihole for ${VLAN_NAME}
      - homepage.widget.type=pihole
      - homepage.widget.key=${PIHOLE_TOKEN}
      - homepage.widget.url=http://${PIHOLE_IP_ADDRESS}
      - homepage.widget.fields=["queries", "blocked", "gravity"]

  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--api.dashboard=true"
      # - "--providers.file.directory=/FileProvider/"
      # - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      internal-net:
      transit-net:
        ipv4_address: ${TRAEFIK_IP_ADDRESS}      
    dns:
      - 1.1.1.1
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`reverseproxy.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - "traefik.docker.network=metal-services_transit-net"
      - homepage.group=Metal
      - homepage.name=Traefik
      - homepage.icon=traefik.png
      - homepage.widget.type=traefik
      - homepage.widget.url=https://reverseproxy.${DOMAIN}
      - homepage.widget.fields=["routers", "services", "middleware"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro  
      - ${DATA_STORAGE}/certs:/letsencrypt
    restart: always
    depends_on:
      - pihole

  cloudflared-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: "cloudflared-tunnel"
    hostname: cloudflared-tunnel
    restart: always
    networks:
      transit-net:
        ipv4_address: ${CLOUDFLARED_TUNNEL_IP_ADDRESS}
    dns:
      - ${PIHOLE_IP_ADDRESS}
    command:
      - tunnel
      - --no-autoupdate
      - run 
      - --token
      - ${CLOUDFARED_TOKEN}
    labels:
      - homepage.group=Network
      - homepage.name=Cloudflare Metal tunnel
      - homepage.icon=cloudflare-zero-trust.png
      - homepage.widget.type=cloudflared
      - homepage.widget.accountid=${CLOUDFLARED_TUNNEL_ACCOUNTID}
      - homepage.widget.tunnelid=${CLOUDFLARED_TUNNEL_TUNNELID_1}
      - homepage.widget.key=${CLOUDFLARE_TUNNEL_API_READ_TOKEN}      
    depends_on:
      - traefik

  plex-music:
    image: linuxserver/plex:latest
    hostname: plex-music
    container_name: plex-music
    labels:
      traefik.enable: true
      traefik.http.routers.plex.rule: "Host(`music.${DOMAIN}`)"
      # traefik.http.routers.plex.tls: true
      # traefik.http.routers.plex.entrypoints: "websecure"
      traefik.http.routers.plex.tls.certresolver: "certificato"
      traefik.http.services.plex.loadbalancer.server.port: 32400
      homepage.group: Metal
      homepage.name: Plex Music
      homepage.icon: plex.png
      homepage.href: https://music.${DOMAIN}/
      homepage.description: Music server
      homepage.widget.type: plex
      homepage.widget.url: http://${PLEXMUSIC_IP_ADDRESS}:32400
      homepage.widget.key: ${PLEX_MUSIC_TOKEN}
    networks:
      transit-net:
        ipv4_address: ${PLEXMUSIC_IP_ADDRESS}
    dns:
      - ${PIHOLE_IP_ADDRESS}
    environment:
      - PLEX_UID=33
      - PLEX_GID=33
      - PUID=33
      - PGID=33
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - TZ=${TZ}
      - ALLOWED_NETWORKS=${PLEX_ALLOWED_NETWORKS}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      - HOSTNAME=music.${DOMAIN}
    volumes:
      - ${DATA_STORAGE}/plex/config:/config
      - ${MUSIC}:/media/music
    restart: unless-stopped
    depends_on:
      - traefik

  librespeed:
    image: adolfintel/speedtest
    hostname: librespeed
    container_name: librespeed
    restart: unless-stopped
    environment:
      - MODE=standalone
    networks:
      - internal-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librespeed.rule=Host(`speedtest.${DOMAIN}`)"
      - "traefik.http.routers.librespeed.tls.certresolver=certificato"
      - "traefik.http.services.librespeed.loadbalancer.server.port=80"
    depends_on:
      - traefik

  speedtest-tracker:
    image: 'ghcr.io/alexjustesen/speedtest-tracker:latest'
    hostname: speedtest-tracker
    container_name: speedtest-tracker
    environment:
        - PUID=33
        - PGID=33
    volumes:
        - ${DATA_STORAGE}/speedtest-tracker-alexjustesen:/config
    networks:
      transit-net:
        ipv4_address: ${SPEEDTEST_TRACKER_IP_ADDRESS}
    dns:
      - ${PIHOLE_IP_ADDRESS}
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.speedtest-tracker.rule=Host(`speedtracker.${DOMAIN}`)"
      - "traefik.http.routers.speedtest-tracker.tls.certresolver=certificato"
      - "traefik.http.services.speedtest-tracker.loadbalancer.server.port=80"
      - homepage.group=Network
      - homepage.name=Speedtest
      - homepage.icon=speedtest-tracker.png
      - homepage.href=https://speedtracker.${DOMAIN}/
      - homepage.description=Speedtest
      - homepage.widget.type=speedtest
      - homepage.widget.url=https://speedtracker.${DOMAIN}
      - homepage.widget.fields=["download", "upload", "ping"]
    depends_on:
      - traefik

  # speedtest-tracker:
  #   container_name: speedtest-tracker
  #   hostname: speedtest-tracker
  #   image: henrywhitaker3/speedtest-tracker
  #   volumes:
  #       - ${DATA_STORAGE}/speedtest-tracker:/config
  #   environment:
  #       - TZ=${TZ}
  #       - PGID=33
  #       - PUID=33
  #       - OOKLA_EULA_GDPR=true
  #   networks:
  #     transit-net:
  #       ipv4_address: ${SPEEDTEST_TRACKER_IP_ADDRESS}
  #   dns:
  #     - ${PIHOLE_IP_ADDRESS}
  #   logging:
  #       driver: "json-file"
  #       options:
  #           max-file: "10"
  #           max-size: "200k"
  #   restart: unless-stopped
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.speedtest-tracker.rule=Host(`speedtracker.${DOMAIN}`)"
  #     - "traefik.http.routers.speedtest-tracker.tls.certresolver=certificato"
  #     - "traefik.http.services.speedtest-tracker.loadbalancer.server.port=80"
  #   depends_on:
  #     - traefik
      
  homepage:
    image: ghcr.io/benphelps/homepage:nightly
    container_name: homepage
    hostname: homepage
    environment:
      - TZ=${TZ}
      - PGID=33
      - PUID=33
    volumes:
      - ${DATA_STORAGE}/homepage:/app/config # Make sure your local config directory exists
      # - /var/run/docker.sock:/var/run/docker.sock:ro # (optional) For docker integrations      
    networks:
      transit-net:
      internal-net:
    dns:
      - ${PIHOLE_IP_ADDRESS}
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.heimdall.rule: "Host(`www.${DOMAIN}`)"
      traefik.http.routers.heimdall.tls.certresolver: "certificato"
      traefik.http.services.heimdall.loadbalancer.server.port: 3000
    depends_on:
      - traefik

  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
        - CONTAINERS=1 # Allow access to viewing containers
        - POST=0 # Disallow any POST operations (effectively read-only)
    ports:
        - 2375:2375
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    networks:
      internal-net:
    restart: unless-stopped

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    hostname: qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
      - WEBUI_PORT=8220
    volumes:
      - ${DATA_STORAGE}/qbittorrent:/config
      - ${TORRENTS}:/downloads #optional
    networks:
      transit-net:
        ipv4_address: ${QBITTORRENT_IP_ADDRESS}
    dns:
      - ${PIHOLE_IP_ADDRESS}
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=Host(`torrent.${DOMAIN}`)
      - traefik.http.routers.qbittorrent.tls.certresolver=certificato
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8220
      - homepage.group=Metal
      - homepage.name=Qbittorrent
      - homepage.icon=qbittorrent.png
      - homepage.href=https://torrent.${DOMAIN}/
      - homepage.description=Qbittorrent
      - homepage.widget.type=qbittorrent
      - homepage.widget.username=admin
      - homepage.widget.password=${QBITTORRENT_PASSWORD}
      - homepage.widget.url=https://torrent.${DOMAIN}
      - homepage.widget.fields=["leech","download", "seed", "upload"]
    depends_on:
      - traefik

  overseerr:
    image: sctx/overseerr:latest
    hostname: overseerr
    container_name: overseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
      - PORT=5055 #optional
    volumes:
      - ${DATA_STORAGE}/overseerr:/app/config
    restart: unless-stopped
    networks:
      - transit-net
    dns:
      - ${PIHOLE_IP_ADDRESS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr.rule=Host(`fetch.${DOMAIN}`)
      - traefik.http.routers.overseerr.tls.certresolver=certificato
      - traefik.http.services.overseerr.loadbalancer.server.port=5055
      - homepage.group=Metal
      - homepage.name=Overseerr
      - homepage.icon=overseerr.png
      - homepage.href=https://fetch.${DOMAIN}/
      - homepage.description=Overseerr
      - homepage.widget.type=overseerr
      - homepage.widget.key=${OVERSEERR_API_KEY}
      - homepage.widget.url=https://fetch.${DOMAIN}
      - homepage.widget.fields=["pending", "approved", "available", "processing"]
    depends_on:
      - traefik

  squid:
    image: ubuntu/squid:latest
    hostname: squid
    container_name: squid
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
      - PUID=33
      - PGID=33
    volumes:
      - ${DATA_STORAGE}/squid/logs:/var/log/squid
      - ${DATA_STORAGE}/squid/data:/var/spool/squid
      - ${DATA_STORAGE}/squid/squid.conf:/etc/squid/squid.conf
      - ${DATA_STORAGE}/squid/snippet.conf:/etc/squid/conf.d/snippet.conf
    restart: unless-stopped
    # ports:
        # - 3128:3128
    networks:
      transit-net:
        ipv4_address: ${SQUID_IP_ADDRESS}
    dns:
      - ${PIHOLE_IP_ADDRESS}

  prowlarr-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: prowlarr-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=HeavyMetal
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=https://prowlarr.${DOMAIN}/
      - homepage.description=Prowlarr
      - homepage.widget.type=prowlarr
      - homepage.widget.key=${PROWLARR_API_KEY}
      - homepage.widget.url=https://prowlarr.${DOMAIN}
      - homepage.widget.fields=["enableIndexers", "numberOfGrabs", "numberOfQueries", "numberOfFailGrabs", "numberOfFailQueries"]

  plex-movietvshows-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: plex-movietvshows-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=HeavyMetal
      - homepage.name=Plex Movies
      - homepage.icon=plex.png
      - homepage.href=https://plex.${DOMAIN}/
      - homepage.description=Plex server for Movies and tvshows
      - homepage.widget.type=plex
      - homepage.widget.url=http://${PLEX_MOVIETVSHOW_IP_ADDRESS}:32400
      - homepage.widget.key=${PLEX_MOVIETVSHOW_TOKEN}

  cloudflared-tunnel-heavymetal-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: cloudflared-tunnel-heavymetal-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=HeavyMetal
      - homepage.name=Cloudflare Heavy Metal tunnel
      - homepage.icon=cloudflare-zero-trust.png
      - homepage.widget.type=cloudflared
      - homepage.widget.accountid=${CLOUDFLARED_TUNNEL_ACCOUNTID}
      - homepage.widget.tunnelid=${CLOUDFLARED_TUNNEL_TUNNELID_2}
      - homepage.widget.key=${CLOUDFLARE_TUNNEL_API_READ_TOKEN}

  scrutiny-heavymetal-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: scrutiny-heavymetal-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=HeavyMetal
      - homepage.name=Disk health
      - homepage.icon=scrutiny.png
      - homepage.widget.type=scrutiny
      - homepage.widget.url=https://drive.${DOMAIN}
      - homepage.widget.fields=["passed", "failed", "unknown"]

  radarr-heavymetal-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: radarr-heavymetal-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=HeavyMetal
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.widget.type=radarr
      - homepage.widget.url=https://movies.${DOMAIN}
      - homepage.widget.key=${RADARR_API_KEY}
      - homepage.widget.fields=["wanted", "missing", "queued", "movies"]

  sonarr-heavymetal-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: sonarr-heavymetal-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=HeavyMetal
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.widget.type=sonarr
      - homepage.widget.url=https://tvshows.${DOMAIN}
      - homepage.widget.key=${SONARR_API_KEY}
      - homepage.widget.fields=["wanted", "queued", "series"]

  nextcloud-heavymetal-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: nextcloud-heavymetal-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=HeavyMetal
      - homepage.name=Nextcloud
      - homepage.icon=nextcloud.png
      - homepage.widget.type=nextcloud
      - homepage.widget.url=https://nextcloud.${DOMAIN}
      # - homepage.widget.username=${NEXTCLOUD_APP_USERNAME}
      # - homepage.widget.password=${NEXTCLOUD_APP_PASSWORD}
      - homepage.widget.key=${NEXTCLOUD_TOKEN}   #  You can generate the token with "php occ config:app:set serverinfo token --value yourtoken
      - homepage.widget.fields=["cpuload", "memoryusage", "freespace", "activeusers"]

  proxmox-metal-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: proxmox-metal-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=Metal
      - homepage.name=Proxmox
      - homepage.icon=proxmox.png
      - homepage.widget.type=proxmox
      - homepage.widget.url=https://${METAL_SERVICES_IP_ADDRESS}:8006
      - homepage.widget.username=${METAL_SERVICES_PROXMOX_TOKEN_ID}
      - homepage.widget.password=${METAL_SERVICES_PROXMOX_TOKEN_SECRET}
      - homepage.widget.fields=["vms", "lxc", "resources.cpu", "resources.mem"]

  proxmox-heavymetal-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: proxmox-heavymetal-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=HeavyMetal
      - homepage.name=Proxmox
      - homepage.icon=proxmox.png
      - homepage.widget.type=proxmox
      - homepage.widget.url=https://${HEAVYMETAL_SERVICES_IP_ADDRESS}:8006
      - homepage.widget.username=${HEAVYMETAL_SERVICES_PROXMOX_TOKEN_ID}
      - homepage.widget.password=${HEAVYMETAL_SERVICES_PROXMOX_TOKEN_SECRET}
      - homepage.widget.fields=["vms", "lxc", "resources.cpu", "resources.mem"]      
  # omada_exporter:
  #   image: chhaley/omada_exporter
  #   hostname: omada_exporter
  #   container_name: omada_exporter
  #   environment:
  #     - OMADA_HOST='https://192.168.1.20'
  #     - OMADA_USER='exporter'
  #     - OMADA_PASS='mypassword'
  #     - OMADA_SITE='Default'
  #   volumes:
  #     - ${DATA_STORAGE}/overseerr:/app/config
  #   restart: unless-stopped
  #   networks:
  #     - transit-net
  #   dns:
  #     - ${DNS_IP_ADDRESS}
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.overseerr.rule=Host(`fetch.${DOMAIN}`)"
  #     - "traefik.http.routers.overseerr.tls.certresolver=certificato"
  #     - "traefik.http.services.overseerr.loadbalancer.server.port=5055"
  #   depends_on:
  #     - traefik