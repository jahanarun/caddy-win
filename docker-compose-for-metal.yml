version: "3.5"

networks:
  tunnel:
  trusted:
  untrusted:
  
services:
  http-server:
    image: jhnrn/http-server-linux:latest
    container_name: "http-server"
    restart: always
    ports:
      - "3000:3000"

  cloudflared-plex-music:
    image: cloudflare/cloudflared:latest
    container_name: "cloudflared-plex-music"
    restart: always
    networks:
      - tunnel
    command:
      - tunnel
      - --no-autoupdate
      - run 
      - --token
      - ${CLOUDFARED_PLEX_MUSIC_TOKEN}

  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--api.dashboard=true"
      # - "--providers.file.directory=/FileProvider/"
      # - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      - tunnel
      - trusted
      - untrusted
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`metal-host.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # So that Traefik can listen to the Docker events
      - ${DATA_STORAGE}/certs:/letsencrypt
    restart: always


  plex:
    image: linuxserver/plex:latest
    container_name: plex
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`music.${DOMAIN}`)"
      # - "traefik.http.routers.plex.tls=true"
      # - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.tls.certresolver=certificato"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
    networks:
      - trusted
    ports:
      - 32400:32400
    environment:
      - PLEX_UID=33
      - PLEX_GID=33
      - PUID=33
      - PGID=33
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - TZ=${TZ}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      - HOSTNAME=music.${DOMAIN}
    volumes:
      - ${DATA_STORAGE}/plex/config:/config
      - ${MUSIC}:/media/music
    restart: unless-stopped

  openspeedtest:
    image: openspeedtest/latest
    container_name: openspeedtest
    restart: unless-stopped
    networks:
      - trusted
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openspeedtest.rule=Host(`speedtest.${DOMAIN}`)"
      - "traefik.http.routers.openspeedtest.tls.certresolver=certificato"
      - "traefik.http.services.openspeedtest.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.test-compress.compress=false"
      - "traefik.http.routers.openspeedtest.entrypoints: web"
      - "traefik.http.middlewares.limit.buffering.maxRequestBodyBytes: 10000000000"
      - "traefik.http.routers.openspeedtest.middlewares: limit"