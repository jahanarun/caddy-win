version: "3.5"

networks:
  bridge-net:
  internal-net:
    internal: true
  vlan-net:
    driver: macvlan
    driver_opts:
      parent: eth1
      name: macvlan80
    ipam:
      config:
        - subnet: 10.100.80.0/24
          gateway: ${GATEWAY_IP_ADDRESS}
          ip_range: 10.100.80.16/28        # 10.100.80.16 - 10.100.80.31

services:
  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--api.dashboard=true"
      # - "--providers.file.directory=/FileProvider/"
      # - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      vlan-net:
        ipv4_address: "10.100.80.55"      
      internal-net:
      bridge-net:
    dns:
      - ${GATEWAY_IP_ADDRESS}
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`reverseproxy.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - "traefik.docker.network=metal-services_vlan-net"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro  
      - ${DATA_STORAGE}/certs:/letsencrypt
    restart: always

  cloudflared-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: "cloudflared-tunnel"
    hostname: cloudflared-tunnel
    restart: always
    networks:
      vlan-net:
        ipv4_address: "10.100.80.41"
    dns:
      - ${GATEWAY_IP_ADDRESS}
    command:
      - tunnel
      - --no-autoupdate
      - run 
      - --token
      - ${CLOUDFARED_TOKEN}
    depends_on:
      - traefik

  plex-music:
    image: linuxserver/plex:latest
    hostname: plex-music
    container_name: plex-music
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`music.${DOMAIN}`)"
      # - "traefik.http.routers.plex.tls=true"
      # - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.tls.certresolver=certificato"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
    networks:
      vlan-net:
        ipv4_address: "10.100.80.40"      
    dns:
      - ${GATEWAY_IP_ADDRESS}
    environment:
      - PLEX_UID=33
      - PLEX_GID=33
      - PUID=33
      - PGID=33
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - TZ=${TZ}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      - HOSTNAME=music.${DOMAIN}
    volumes:
      - ${DATA_STORAGE}/plex/config:/config
      - ${MUSIC}:/media/music
    restart: unless-stopped
    depends_on:
      - traefik

  librespeed:
    image: adolfintel/speedtest
    hostname: librespeed
    container_name: librespeed
    restart: unless-stopped
    environment:
      - MODE=standalone
    networks:
      - internal-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librespeed.rule=Host(`speedtest.${DOMAIN}`)"
      - "traefik.http.routers.librespeed.tls.certresolver=certificato"
      - "traefik.http.services.librespeed.loadbalancer.server.port=80"
    depends_on:
      - traefik

  speedtest-tracker:
    container_name: speedtest-tracker
    hostname: speedtest-tracker
    image: henrywhitaker3/speedtest-tracker
    volumes:
        - ${DATA_STORAGE}/speedtest-tracker:/config
    environment:
        - TZ=${TZ}
        - PGID=33
        - PUID=33
        - OOKLA_EULA_GDPR=true
    networks:
      bridge-net:
    logging:
        driver: "json-file"
        options:
            max-file: "10"
            max-size: "200k"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.speedtest-tracker.rule=Host(`speedtracker.${DOMAIN}`)"
      - "traefik.http.routers.speedtest-tracker.tls.certresolver=certificato"
      - "traefik.http.services.speedtest-tracker.loadbalancer.server.port=80"
    depends_on:
      - traefik
      
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    hostname: heimdall
    container_name: heimdall
    environment:
      - TZ=${TZ}
      - PGID=33
      - PUID=33
    volumes:
      - ${DATA_STORAGE}/heimdall:/config
    networks:
      internal-net:
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.rule=Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.heimdall.tls.certresolver=certificato"
      - "traefik.http.services.heimdall.loadbalancer.server.port=80"
    depends_on:
      - traefik

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    hostname: qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
      - WEBUI_PORT=8220
    volumes:
      - ${DATA_STORAGE}/qbittorrent:/config
      - ${TORRENTS}:/downloads #optional
    networks:
      vlan-net:
    dns:
      - ${GATEWAY_IP_ADDRESS}
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`torrent.${DOMAIN}`)"
      - "traefik.http.routers.qbittorrent.tls.certresolver=certificato"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8220"
    depends_on:
      - traefik

  overseerr:
    image: sctx/overseerr:latest
    hostname: overseerr
    container_name: overseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
      - PORT=5055 #optional
    volumes:
      - ${DATA_STORAGE}/overseerr:/app/config
    restart: unless-stopped
    networks:
      - vlan-net
    dns:
      - ${GATEWAY_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.overseerr.rule=Host(`fetch.${DOMAIN}`)"
      - "traefik.http.routers.overseerr.tls.certresolver=certificato"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"
    depends_on:
      - traefik
