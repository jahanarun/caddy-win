version: "3.9"

networks:

  things-net:
    driver: macvlan # Otherwise PiHole container cannot resolve DNS internally due to NAT issue within Docker
    driver_opts:
      parent: ${NETWORK_DEVICE}.${THINGS_VLAN_ID}
      name: macvlan${THINGS_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${THINGS_VLAN_ID}.0/24
          gateway: 10.100.${THINGS_VLAN_ID}.2
          ip_range: 10.100.${THINGS_VLAN_ID}.50/30 # 48 - 51

services:

  dns-upstream-things:
    image: jhnrn/cloudflared:latest
    container_name: "cloudflared-dnsproxy-${THINGS_VLAN_NAME}"
    command: proxy-dns
    restart: always
    environment:
      TZ: ${TZ}    
      TUNNEL_METRICS: "0.0.0.0:49312"
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      TUNNEL_DNS_PORT: ${TUNNEL_DNS_PORT}
      TUNNEL_DNS_UPSTREAM: ${THINGS_DNS_UPSTREAM}
    networks:
      things-net:
    healthcheck:
      # test: dig +short @127.0.0.1 -p${TUNNEL_DNS_PORT} bing.com AAAA || exit 1
      test: 'curl --http2 -H "accept: application/dns-json" "https://1.1.1.1/dns-query?name=cloudflare.com"  || exit 1'
      interval: 30s
      timeout: 5s
      retries: 2
    labels:
      - autoheal=true

  pihole:
    container_name: pihole-${THINGS_VLAN_NAME}
    hostname: pihole-${THINGS_VLAN_NAME}
    image: pihole/pihole:dev
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
      PIHOLE_DNS_: dns-upstream-things#${TUNNEL_DNS_PORT}
      # Listen on all interfaces and permit all origins
      # This allows Pihole to work in this setup and when answering across VLANS,
      # but do not expose pi-hole to the internet!
      DNSMASQ_LISTENING: local
      DNS_BOGUS_PRIV: true
      DNS_FQDN_REQUIRED: true
      DHCP_ACTIVE: true
      DHCP_START: 10.100.${THINGS_VLAN_ID}.201
      DHCP_END: 10.100.${THINGS_VLAN_ID}.251
      DHCP_ROUTER: 10.100.${THINGS_VLAN_ID}.2
      PIHOLE_DOMAIN: ${DOMAIN}
      DHCP_LEASETIME: 24
      WEBTHEME: default-auto
    # Volumes store your data between container upgrades
    volumes:
      - ${DATA_STORAGE}/pihole/${THINGS_VLAN_NAME}/pihole:/etc/pihole
      - ${DATA_STORAGE}/pihole/${THINGS_VLAN_NAME}/dnsmasq.d:/etc/dnsmasq.d
      - ${DATA_STORAGE}/pihole/global/custom.list:/etc/pihole/custom.list
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    networks:
      things-net:
        ipv4_address: ${THINGS_PIHOLE_IP_ADDRESS}
    dns:
      - 127.0.0.1        
    restart: unless-stopped
    depends_on:
      - dns-upstream-things
    labels:
      - homepage.group=DNS
      - homepage.weight=1
      - homepage.name=Pihole-things
      - homepage.icon=pi-hole.png
      - homepage.href=http://${THINGS_PIHOLE_IP_ADDRESS}/admin
      - homepage.description=for ${THINGS_VLAN_NAME}
      - homepage.widget.type=pihole
      - homepage.widget.key=${PIHOLE_TOKEN}
      - homepage.widget.url=http://${THINGS_PIHOLE_IP_ADDRESS}
      # - homepage.widget.fields=["queries", "blocked", "gravity"]

  homeassistant:
    container_name: homeassistant
    hostname: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:2023.7.3"
    volumes:
      - ${DATA_STORAGE}/homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
    devices:
    #   - /dev/ttyACMO  # (optional) Add serial devices to the container
      - ${ZIGBEE_DEVICE}
    privileged: true
    restart: unless-stopped
    networks:
      things-net:
        ipv4_address: ${HOMEASSISTANT_IP_ADDRESS}
    dns:
      - ${THINGS_PIHOLE_IP_ADDRESS}
    depends_on:
      - pihole
    labels:
      - traefik.enable=true
      - traefik.http.routers.homeassistant.rule=Host(`home.${DOMAIN}`)
      - traefik.http.routers.homeassistant.tls.certresolver=certificato
      - traefik.http.routers.homeassistant.entrypoints=web,web-secure
      - traefik.http.services.homeassistant.loadbalancer.server.port=8123
