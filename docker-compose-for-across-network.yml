version: "3.9"

networks:

  things-services_things-net:
    external: true

  quantum-services_quantum-net:
    external: true

  metal-services_01-transit_80-net:
    external: true

  metal-services_harmless-net:
    external: true

  metal-services_internal-net:
    external: true

services:

  http-server:
    image: jhnrn/http-server-linux:latest
    container_name: "http-server"
    restart: always
    ports:
      - "3000:3000"

  omada-controller:
    container_name: omada-controller
    image: mbentley/omada-controller:5.9
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 4096
        hard: 8192
    stop_grace_period: 60s
    network_mode: host
    environment:
      - PUID=508
      - PGID=508
      - MANAGE_HTTP_PORT=8088
      - MANAGE_HTTPS_PORT=8043
      - PORTAL_HTTP_PORT=8088
      - PORTAL_HTTPS_PORT=8843
      - PORT_APP_DISCOVERY=27001
      - PORT_ADOPT_V1=29812
      - PORT_UPGRADE_V1=29813
      - PORT_MANAGER_V1=29811
      - PORT_MANAGER_V2=29814
      - PORT_DISCOVERY=29810
      - SHOW_SERVER_LOGS=true
      - SHOW_MONGODB_LOGS=false
      - SSL_CERT_NAME=tls.crt
      - SSL_KEY_NAME=tls.key
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/omada/data:/opt/tplink/EAPController/data
      - ${DATA_STORAGE}/omada/logs:/opt/tplink/EAPController/logs

  mdns:
    image: jhnrn/avahi
    hostname: mdns
    container_name: mdns
    environment:
      - REFLECTOR_ENABLE_REFLECTOR=yes
    restart: unless-stopped
    networks:
      things-services_things-net:
        ipv4_address: ${AVAHI_THINGS_IP_ADDRESS}
      quantum-services_quantum-net:
        ipv4_address: ${AVAHI_QUANTUM_IP_ADDRESS}

  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--api.dashboard=true"
      - "--providers.file.directory=/FileProvider/"
      - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.ssh.address=:22"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      metal-services_01-transit_80-net:
        ipv4_address: ${TRAEFIK_IP_ADDRESS}
      metal-services_internal-net:
      metal-services_harmless-net:
      things-services_things-net:
    dns:
      - 1.1.1.1
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`reverseproxy.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - "traefik.docker.network=metal-services_01-transit_80-net"
      - homepage.group=Metal
      - homepage.name=Traefik
      - homepage.weight=1000
      - homepage.description=for Metal
      - homepage.icon=traefik.png
      - homepage.href=https://reverseproxy.${DOMAIN}
      - homepage.widget.type=traefik
      - homepage.widget.url=https://reverseproxy.${DOMAIN}
      # - homepage.widget.fields=["routers", "services", "middleware"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro  
      - ${DATA_STORAGE}/traefik/certs:/letsencrypt
      - ${DATA_STORAGE}/traefik/dynamic:/FileProvider
    restart: always
    healthcheck: # This is to announce to the network (router and switch) that this ip address is sitting here
      test: ping -c 1 bing.com || exit 1
      interval: 30s
      retries: 5