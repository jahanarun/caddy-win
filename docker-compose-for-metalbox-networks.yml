version: "3.9"

networks:
  vlan_80:
    driver: macvlan # Otherwise PiHole and other containers cannot resolve DNS internally due to NAT issue within Docker
    # driver: ipvlan
    driver_opts:
      # ipvlan_mode: l2
      parent: ${NETWORK_DEVICE}.${METAL_VLAN_ID}
      name: macvlan${METAL_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${METAL_VLAN_ID}.0/24
          gateway: ${METAL_GATEWAY}
          ip_range: 10.100.${METAL_VLAN_ID}.128/26 # 128-191
          # aux_addresses:
          #   reserved: 10.100.${METAL_VLAN_ID}.1
          #   dns: 10.100.${METAL_VLAN_ID}.3

  vlan_30:
    driver: macvlan # Otherwise PiHole container cannot resolve DNS internally due to NAT issue within Docker
    driver_opts:
      parent: ${NETWORK_DEVICE}.${QUANTUM_VLAN_ID}
      name: macvlan${QUANTUM_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${QUANTUM_VLAN_ID}.0/24
          gateway: ${QUANTUM_GATEWAY}
          ip_range: 10.100.${QUANTUM_VLAN_ID}.50/29 # 48 - 55

  vlan_20:
    driver: macvlan # Otherwise PiHole container cannot resolve DNS internally due to NAT issue within Docker
    driver_opts:
      parent: ${NETWORK_DEVICE}.${THINGS_VLAN_ID}
      name: macvlan${THINGS_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${THINGS_VLAN_ID}.0/24
          gateway: ${THINGS_GATEWAY}
          ip_range: 10.100.${THINGS_VLAN_ID}.64/26 # 64 - 127 (Internet blocked range)

  traefik_proxy:
    driver: bridge
    internal: true

services:
  do-nothing:
    image: jhnrn/do-nothing:latest
    restart: unless-stopped
    networks:
      vlan_80:
      vlan_30:
      vlan_20:
      traefik_proxy:

  mdns:
    image: jhnrn/avahi
    hostname: mdns
    container_name: mdns
    environment:
      - REFLECTOR_ENABLE_REFLECTOR=yes
    restart: unless-stopped
    networks:
      vlan_20:
        ipv4_address: ${AVAHI_THINGS_IP_ADDRESS}
      vlan_30:
        ipv4_address: ${AVAHI_QUANTUM_IP_ADDRESS}

  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--api.dashboard=true"
      - "--providers.file.directory=/FileProvider/"
      - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.ssh.address=:22"
      - "--entrypoints.rtsp.address=:8554"
      # - "--middlewares.quantum-ipwhitelist.ipwhitelist.sourcerange=:127.0.0.1/32,${QUANTUM_NETWORK}"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      traefik_proxy:
      vlan_20:
        ipv4_address: ${TRAEFIK_IP_ADDRESS_FOR_THINGS}
      vlan_80:
        ipv4_address: ${TRAEFIK_IP_ADDRESS}
    dns:
      - ${METAL_PIHOLE_IP_ADDRESS}
      - 1.1.1.1
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`reverse-metal.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - traefik.docker.network=traefik_proxy
      - homepage.group=Metal
      - homepage.name=Traefik
      - homepage.weight=1000
      - homepage.description=serving Quantum network
      - homepage.icon=traefik.png
      - homepage.href=https://reverse-metal.${DOMAIN}
      - homepage.widget.type=traefik
      - homepage.widget.url=https://reverse-metal.${DOMAIN}
      # - homepage.widget.fields=["routers", "services", "middleware"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro  
      - ${DATA_STORAGE}/traefik/certs:/letsencrypt
      - ${DATA_STORAGE}/traefik/dynamic:/FileProvider
    restart: always
    healthcheck: # This is to announce to the network (router and switch) that this ip address is sitting here
      test: traefik healthcheck --ping && ping -c 1 bing.com || exit 1
      interval: 30s
      retries: 5