version: "3.5"

networks:
  vlan-net:
    driver: macvlan
    driver_opts:
      parent: enp8s0.80
      name: macvlan80
    ipam:
      config:
        - subnet: 10.100.80.0/24
          gateway: ${GATEWAY_IP_ADDRESS}
          ip_range: 10.100.80.32/28        # 10.100.80.32 - 10.100.80.47
  backend-net:
    driver: bridge
    internal: true
  dummy-net:
    internal: true

services:
  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--api.dashboard=true"
      # - "--providers.file.directory=/FileProvider/"
      # - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      vlan-net:
        ipv4_address: "10.100.80.56"      
    dns:
      - ${DNS_IP_ADDRESS}
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`reverse1.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - "traefik.docker.network=heavymetal-services_vlan-net"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro  
      - ${DATA_STORAGE}/certs:/letsencrypt
    restart: always

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
    volumes:
      - /${DATA_STORAGE}/sonarr:/config
      - ${TVSHOWS}:/media/Series #optional
      - ${TORRENTS}:/downloads #optional
    networks:
      vlan-net:
        ipv4_address: "10.100.80.22"
    dns:
      - ${DNS_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`tvshows.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.tls.certresolver=certificato"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
    depends_on:
      - traefik

  radarr:
    image: lscr.io/linuxserver/radarr:nightly
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/radarr:/config
      - ${MOVIES}:/media/Movies
      - ${TORRENTS}:/downloads #optional
    networks:
      vlan-net:
        ipv4_address: "10.100.80.23"
    dns:
      - ${DNS_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`movies.${DOMAIN}`)"
      - "traefik.http.routers.radarr.tls.certresolver=certificato"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    depends_on:
      - traefik

  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    # image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    hostname: flaresolverr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    networks:
      vlan-net:
        ipv4_address: "10.100.80.20"
    dns:
      - ${DNS_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.${DOMAIN}`)"
      - "traefik.http.routers.flaresolverr.tls.certresolver=certificato"
      - "traefik.http.services.flaresolverr.loadbalancer.server.port=8191"
    depends_on:
      - traefik

  prowlarr:
    image: linuxserver/prowlarr:develop
    container_name: prowlarr
    hostname: prowlarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
      # - RUN_OPTS=<run options here> #optional
    volumes:
      - ${DATA_STORAGE}/prowlarr:/config
    networks:
      vlan-net:
    dns:
      - ${DNS_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)"
      - "traefik.http.routers.prowlarr.tls.certresolver=certificato"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
    depends_on:
      - traefik
      - flaresolverr

  plex:
    image: linuxserver/plex:latest
    container_name: plex-movietvshow
    hostname: plex-movietvshow
    restart: unless-stopped
    environment:
      - PLEX_UID=33
      - PLEX_GID=33
      - PUID=33
      - PGID=33
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - TZ=${TZ}
      - ALLOWED_NETWORKS=${PLEX_ALLOWED_NETWORKS}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      - HOSTNAME=plex.${DOMAIN}
    volumes:
      - ${DATA_STORAGE}/plex/config:/config
      - ${TVSHOWS}:/media/Series
      - ${MOVIES}:/media/Movies
      - ${MUSIC}:/media/Music
      - ${PLEX_USER1_VOLUME_MOUNT}
      - ${PLEX_USER2_VOLUME_MOUNT}
    networks:
      vlan-net:
        ipv4_address: "10.100.80.21"
    dns:
      - ${DNS_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`plex.${DOMAIN}`)"
      - "traefik.http.routers.plex.tls.certresolver=certificato"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
    depends_on:
      - traefik

  imaginary:
    image: nextcloud/aio-imaginary:latest
    container_name: "imaginary"
    restart: unless-stopped
    environment:
       PORT: 9000
    ports:
      - "9000:9000"
    networks:
      - backend-net
      
  nextcloud-redis:
    image: redis:6
    container_name: "nextcloud-redis"
    restart: unless-stopped
    volumes:
      - ${NEXTCLOUD_DATA}/redis:/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - backend-net

  nextcloud-db:
    image: mariadb
    container_name: "nextcloud-db"
    restart: unless-stopped
    networks:
      - backend-net
    expose:
      - "3306"
    command: --verbose --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed
    volumes:
      - ${NEXTCLOUD_DATA}/db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${NEXTCLOUD_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${NEXTCLOUD_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud-user

  nextcloud:
    image: jhnrn/nextcloud-linux
    container_name: nextcloud
    hostname: nextcloud
    restart: unless-stopped
    ports:
      - 8080:80
    links:
      - nextcloud-db
    volumes:
      - ${NEXTCLOUD_DATA}/html:/var/www/html
      - ${NEXTCLOUD_DATA}/data:/var/www/html/data
      - ${NEXTCLOUD_DATA}/tmp:/tmp
      - ${NEXTCLOUD_DATA}/php/conf.d:/usr/local/etc/php/conf.d
    environment:
      - MYSQL_PASSWORD=${NEXTCLOUD_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud-user
      - MYSQL_HOST=nextcloud-db
      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.${DOMAIN}
      - REDIS_HOST=nextcloud-redis
      - NEXTCLOUD_HOSTNAME=${NEXTCLOUD_HOSTNAME}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - OVERWRITEPROTOCOL=https
      - OVERWRITECLIURL=https://nextcloud.${DOMAIN}
      - OVERWRITEHOST=nextcloud.${DOMAIN}
      - PUID=33
      - PGID=33
      - PHP_UPLOAD_LIMIT=8G
      - PHP_MEMORY_LIMIT=8G
      - PHP_UPLOAD_LIMIT=20G
    networks:
      vlan-net:
      backend-net:
    dns:
      - ${DNS_IP_ADDRESS}
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.nextcloud_scan.schedule=@every 1h30m"
      - "ofelia.job-exec.nextcloud_scan.user=33"
      - "ofelia.job-exec.nextcloud_scan.command=php occ files:scan --all"
      - "ofelia.job-exec.nextcloud_cron.schedule=@every 5m"
      - "ofelia.job-exec.nextcloud_cron.user=33"
      - "ofelia.job-exec.nextcloud_cron.command=php -f /var/www/html/cron.php"
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.${DOMAIN}`)"
      - "traefik.http.routers.nextcloud.tls.certresolver=certificato"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
      - "traefik.docker.network=heavymetal-services_vlan-net"
    depends_on:
      - traefik
      - nextcloud-db
      - nextcloud-redis

  photoprism:
    image: photoprism/photoprism:latest
    container_name: photoprism
    hostname: photoprism
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    environment:
      PHOTOPRISM_ADMIN_PASSWORD: ${PHOTOPRISM_ADMIN_PASSWORD} # PLEASE CHANGE: Your initial admin password (min 4 characters)
      PHOTOPRISM_SITE_URL: ${PHOTOPRISM_SITE_URL} # Public server URL incl http:// or https:// and /path, :port is optional
      PHOTOPRISM_ORIGINALS_LIMIT: 5000 # File size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip" # Improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_DEBUG: "false" # Run in debug mode (shows additional log messages)
      PHOTOPRISM_PUBLIC: "false" # No authentication required (disables password protection)
      PHOTOPRISM_READONLY: "false" # Don't modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false" # Enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "true" # Disables storage permission updates on startup
      PHOTOPRISM_DISABLE_WEBDAV: "false" # Disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false" # Disables Settings in Web UI
      PHOTOPRISM_DISABLE_TENSORFLOW: "false" # Disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false" # Disables facial recognition
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false" # Disables image classification
      PHOTOPRISM_DARKTABLE_PRESETS: "false" # Enables Darktable presets and disables concurrent RAW conversion
      PHOTOPRISM_DETECT_NSFW: "false" # Flag photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true" # Allow uploads that MAY be offensive
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      PHOTOPRISM_DATABASE_DRIVER: "mysql" # Use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "photoprism-mariadb:3306" # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism" # MariaDB or MySQL database schema name
      PHOTOPRISM_DATABASE_USER: "photoprism" # MariaDB or MySQL database user name
      PHOTOPRISM_DATABASE_PASSWORD: ${PHOTOPRISM_DATABASE_PASSWORD} # MariaDB or MySQL database user password
      PHOTOPRISM_SITE_TITLE: "PhotoPrism"
      PHOTOPRISM_SITE_CAPTION: "Browse Your Life"
      PHOTOPRISM_SITE_DESCRIPTION: ""
      PHOTOPRISM_SITE_AUTHOR: ""
      PHOTOPRISM_THUMB_FILTER: "blackman"      # resample filter, best to worst: blackman, lanczos, cubic, linear
      PHOTOPRISM_THUMB_UNCACHED: "true"       # enables on-demand thumbnail rendering (high memory and cpu usage)
      PHOTOPRISM_THUMB_SIZE: 2048             # pre-rendered thumbnail size limit (default 2048, min 720, max 7680)
      # PHOTOPRISM_THUMB_SIZE: 4096           # retina 4K, DCI 4K (requires more storage); 7680 for 8K Ultra HD
      PHOTOPRISM_THUMB_SIZE_UNCACHED: 7680    # on-demand rendering size limit (default 7680, min 720, max 7680)
      PHOTOPRISM_JPEG_SIZE: 7680              # size limit for converted image files in pixels (720-30000)
      PHOTOPRISM_JPEG_QUALITY: 85             # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
      ## Enable TensorFlow AVX2 support for modern Intel CPUs (requires starting the container as root):
      # PHOTOPRISM_INIT: "tensorflow-amd64-avx2"
      ## Hardware video transcoding config (optional):
      # PHOTOPRISM_FFMPEG_BUFFERS: "64"              # FFmpeg capture buffers (default: 32)
      # PHOTOPRISM_FFMPEG_BITRATE: "32"              # FFmpeg encoding bitrate limit in Mbit/s (default: 50)
      # PHOTOPRISM_FFMPEG_ENCODER: "h264_v4l2m2m"    # Use Video4Linux for AVC transcoding (default: libx264)
      # PHOTOPRISM_FFMPEG_ENCODER: "h264_qsv"        # Use Intel Quick Sync Video for AVC transcoding (default: libx264)
      # PHOTOPRISM_INIT: "intel-graphics tensorflow-amd64-avx2" # Enable TensorFlow AVX2 & Intel Graphics support
      HOME: "/photoprism"
    ## Hardware devices for video transcoding and machine learning (optional):
    # devices:
    #  - "/dev/video11:/dev/video11" # Video4Linux (h264_v4l2m2m)
    #  - "/dev/dri/renderD128:/dev/dri/renderD128" # Intel GPU
    #  - "/dev/dri/card0:/dev/dri/card0"
    working_dir: "/photoprism"
    volumes:
      ## The *originals* folder contains your original photo and video files (- "[host folder]:/photoprism/originals"):
      - ${PHOTOPRISM_USER1_VOLUME_MOUNT}
      - ${PHOTOPRISM_USER2_VOLUME_MOUNT}
      ## You may mount an *import* folder from which files can be transferred to *originals* (optional):
      # - "~/Import:/photoprism/import"
      ## Cache, session, thumbnail, and sidecar files will be created in the *storage* folder (never remove):
      - ${PHOTOPRISM_DATA}/storage:/photoprism/storage
    networks:
      vlan-net:
      backend-net:
    dns:
      - ${DNS_IP_ADDRESS}
    labels:
      ofelia.enabled: true
      ofelia.job-exec.photoprism_index.schedule: "@every 1h"
      ofelia.job-exec.photoprism_index.command: "photoprism index --cleanup"
      traefik.enable: true
      traefik.http.routers.photoprism.rule: "Host(`photoprism.${DOMAIN}`)"
      traefik.http.routers.photoprism.tls.certresolver: "certificato"
      traefik.http.services.photoprism.loadbalancer.server.port: 2342
      traefik.docker.network: "heavymetal-services_vlan-net"
    depends_on:
      - traefik
      - photoprism-mariadb

  photoprism-mariadb:
    restart: unless-stopped
    container_name: "photoprism-db"
    image: mariadb:10.6
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    networks:
      - backend-net
    command: mysqld --innodb-buffer-pool-size=256M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    ## Never store database files on an unreliable device such as a USB flash drive or a shared network folder:
    volumes:
      - ${PHOTOPRISM_DATA}/db:/var/lib/mysql # Important, don't remove
    environment:
      MYSQL_ROOT_PASSWORD: ${PHOTOPRISM_ROOT_DATABASE_PASSWORD}
      MYSQL_DATABASE: photoprism
      MYSQL_USER: photoprism
      MYSQL_PASSWORD: ${PHOTOPRISM_DATABASE_PASSWORD}

  ## Ofelia Job Runner (recommended for running background jobs)
  ## see https://github.com/mcuadros/ofelia
  ofelia:
    restart: unless-stopped
    image: mcuadros/ofelia:latest
    container_name: ofelia
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      dummy-net:
    depends_on:
      - photoprism
      - nextcloud

  gogs:
    image: "gogs/gogs:latest"
    container_name: "gogs"
    hostname: "gogs"
    restart: "always"
    environment:
      RUN_CROND: true
      SSH_PORT: "22"
    volumes:
      - ${GOGS_DATA}/data:/data
    networks:
      vlan-net:
      backend-net:
    dns:
      - ${DNS_IP_ADDRESS}
    labels:
      traefik.enable: true
      traefik.http.routers.gogs.rule: "Host(`git.${DOMAIN}`)"
      traefik.http.routers.gogs.tls.certresolver: "certificato"
      traefik.http.services.gogs.loadbalancer.server.port: 3000
      traefik.docker.network: "heavymetal-services_vlan-net"
    depends_on:
      - gogs-mariadb
      - traefik

  gogs-mariadb:
    image: "mariadb:latest"
    container_name: "gogs-mariadb"
    restart: "always"
    environment:
      MYSQL_DATABASE: "gogs"
      MYSQL_PASSWORD: ${GOGS_DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${GOGS_DATABASE_ROOT_PASSWORD}
      MYSQL_USER: "gogs"
    volumes:
      - ${GOGS_DATA}/db:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - backend-net