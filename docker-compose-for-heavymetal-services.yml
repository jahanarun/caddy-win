version: "3.5"

networks:
  vlan-net:
    driver: macvlan
    driver_opts:
      parent: enp8s0.80
      name: macvlan80
    ipam:
      config:
        - subnet: 10.100.80.0/24
          gateway: 10.100.80.1
          ip_range: 10.100.80.32/28        # 10.100.80.32 - 10.100.80.47
  backend:
    driver: bridge
    internal: true

services:
  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--api.dashboard=true"
      # - "--providers.file.directory=/FileProvider/"
      # - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      vlan-net:
        ipv4_address: "10.100.80.56"      
    dns:
      - ${GATEWAY_IP_ADDRESS}
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`reverse1.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - "traefik.docker.network=heavymetal-services_vlan-net"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro  
      - ${DATA_STORAGE}/certs:/letsencrypt
    restart: always

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
    volumes:
      - /${DATA_STORAGE}/sonarr:/config
      - ${TVSHOWS}:/media/Series #optional
      - ${TORRENTS}:/downloads #optional
    networks:
      vlan-net:
    dns:
      - ${GATEWAY_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`tvshows.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.tls.certresolver=certificato"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
    depends_on:
      - traefik

  radarr:
    image: lscr.io/linuxserver/radarr:nightly
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/radarr:/config
      - ${MOVIES}:/media/Movies
      - ${TORRENTS}:/downloads #optional
    networks:
      vlan-net:
    dns:
      - ${GATEWAY_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`movies.${DOMAIN}`)"
      - "traefik.http.routers.radarr.tls.certresolver=certificato"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    depends_on:
      - traefik

  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    # image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    hostname: flaresolverr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    networks:
      vlan-net:
        ipv4_address: "10.100.80.30"
    dns:
      - ${GATEWAY_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.${DOMAIN}`)"
      - "traefik.http.routers.flaresolverr.tls.certresolver=certificato"
      - "traefik.http.services.flaresolverr.loadbalancer.server.port=8191"
    depends_on:
      - traefik

  prowlarr:
    image: linuxserver/prowlarr:develop
    container_name: prowlarr
    hostname: prowlarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
      # - RUN_OPTS=<run options here> #optional
    volumes:
      - ${DATA_STORAGE}/prowlarr:/config
    networks:
      vlan-net:
    dns:
      - ${GATEWAY_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)"
      - "traefik.http.routers.prowlarr.tls.certresolver=certificato"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
    depends_on:
      - traefik
      - flaresolverr

  plex:
    image: linuxserver/plex:latest
    container_name: plex-movietvshow
    hostname: plex-movietvshow
    restart: unless-stopped
    environment:
      - PLEX_UID=33
      - PLEX_GID=33
      - PUID=33
      - PGID=33
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - TZ=${TZ}
      - ALLOWED_NETWORKS=${PLEX_ALLOWED_NETWORKS}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      - HOSTNAME=plex.${DOMAIN}
    volumes:
      - ${DATA_STORAGE}/plex/config:/config
      - ${TVSHOWS}:/media/Series
      - ${MOVIES}:/media/Movies
      - ${MUSIC}:/media/Music
      - ${PLEX_USER1_VOLUME_MOUNT}
      - ${PLEX_USER2_VOLUME_MOUNT}
    networks:
      vlan-net:
    dns:
      - ${GATEWAY_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`plex.${DOMAIN}`)"
      - "traefik.http.routers.plex.tls.certresolver=certificato"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
    depends_on:
      - traefik

  imaginary:
    image: nextcloud/aio-imaginary:latest
    container_name: "imaginary"
    restart: unless-stopped
    environment:
       PORT: 9000
    ports:
      - "9000:9000"
    networks:
      - backend
      
  nextcloud-redis:
    image: redis:6
    container_name: "nextcloud-redis"
    restart: unless-stopped
    volumes:
      - ${NEXTCLOUD_DATA}/redis:/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - backend

  nextcloud-db:
    image: mariadb
    container_name: "nextcloud-db"
    restart: unless-stopped
    networks:
      - backend
    expose:
      - "3306"
    command: --verbose --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed
    volumes:
      - ${NEXTCLOUD_DATA}/db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${NEXTCLOUD_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${NEXTCLOUD_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud-user

  nextcloud:
    image: jhnrn/nextcloud-linux
    container_name: nextcloud
    hostname: nextcloud
    restart: unless-stopped
    ports:
      - 8080:80
    links:
      - nextcloud-db
    volumes:
      - ${NEXTCLOUD_DATA}/html:/var/www/html
      - ${NEXTCLOUD_DATA}/data:/var/www/html/data
      - ${NEXTCLOUD_DATA}/tmp:/tmp
    environment:
      - MYSQL_PASSWORD=${NEXTCLOUD_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud-user
      - MYSQL_HOST=nextcloud-db
      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.${DOMAIN}
      - REDIS_HOST=nextcloud-redis
      - NEXTCLOUD_HOSTNAME=${NEXTCLOUD_HOSTNAME}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - OVERWRITEPROTOCOL=https
      - PUID=33
      - PGID=33
      - PHP_UPLOAD_LIMIT=8G
      - PHP_MEMORY_LIMIT=8G
    networks:
      vlan-net:
      backend:
    dns:
      - ${GATEWAY_IP_ADDRESS}
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.nextcloud_scan.schedule=@every 1h30m"
      - "ofelia.job-exec.nextcloud_scan.user=33"
      - "ofelia.job-exec.nextcloud_scan.command=php occ files:scan --all"
      - "ofelia.job-exec.nextcloud_cron.schedule=@every 5m"
      - "ofelia.job-exec.nextcloud_cron.user=33"
      - "ofelia.job-exec.nextcloud_cron.command=php -f /var/www/html/cron.php"
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.${DOMAIN}`)"
      - "traefik.http.routers.nextcloud.tls.certresolver=certificato"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
      - "traefik.docker.network=heavymetal-services_vlan-net"
    depends_on:
      - traefik
      - nextcloud-db
      - nextcloud-redis
