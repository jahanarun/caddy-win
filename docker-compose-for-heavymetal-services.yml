version: "3.5"

networks:
  01-transit_80-net:
    driver: macvlan # Otherwise PiHole and other containers cannot resolve DNS internally due to NAT issue within Docker
    # driver: ipvlan
    driver_opts:
      parent: enp8s0.${METAL_VLAN_ID}
      name: macvlan${METAL_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${METAL_VLAN_ID}.0/24
          gateway: ${METAL_GATEWAY_IP_ADDRESS}

  internal-net:
    driver: bridge
    internal: true

services:
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
        - CONTAINERS=1 # Allow access to viewing containers
        - POST=0 # Disallow any POST operations (effectively read-only)
    # ports:
    #     - 2375:2375
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    networks:
      01-transit_80-net:
        ipv4_address: ${HEAVYMETAL_DOCKERPROXY_IP_ADDRESS}
    restart: unless-stopped

  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--api.dashboard=true"
      - "--providers.docker.endpoint=tcp://dockerproxy:2375"
      - "--providers.file.directory=/FileProvider/"
      - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.ssh.address=:22"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      internal-net:
      01-transit_80-net:
        ipv4_address: ${TRAEFIK_IP_ADDRESS_2}
    dns:
      - 1.1.1.1
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`reverse1.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - "traefik.docker.network=heavymetal-services_01-transit_80-net"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro  
      - ${DATA_STORAGE}/traefik/certs:/letsencrypt
      - ${DATA_STORAGE}/traefik/dynamic:/FileProvider
    restart: always
    depends_on:
      - dockerproxy
    healthcheck: # This is to announce to the network (router and switch) that this ip address is sitting here
      test: ping -c 1 bing.com || exit 1
      interval: 30s
      retries: 5

  cloudflared-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: "cloudflared-tunnel"
    hostname: cloudflared-tunnel
    restart: always
    networks:
      01-transit_80-net:
        ipv4_address: ${HEAVYMETAL_CLOUDFLARED_TUNNEL_IPADDR}
    dns:
      - ${PIHOLE_IP_ADDRESS}
    command:
      - tunnel
      - --no-autoupdate
      - run 
      - --token
      - ${HEAVYMETAL_CLOUDFARED_TOKEN}
    labels:
      - homepage.group=Network
      - homepage.weight=2
      - homepage.name=Cloudflare HeavyMetal tunnel
      - homepage.icon=cloudflare-zero-trust.png
      - homepage.widget.type=cloudflared
      - homepage.widget.accountid=${CLOUDFLARED_TUNNEL_ACCOUNTID}
      - homepage.widget.tunnelid=${CLOUDFLARED_TUNNEL_TUNNELID_2}
      - homepage.widget.key=${CLOUDFLARE_TUNNEL_API_READ_TOKEN}
    depends_on:
      - traefik

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/sonarr:/config
      - ${TVSHOWS}:/media/Series #optional
      - ${TORRENTS}:/downloads #optional
    networks:
      01-transit_80-net:
        ipv4_address: ${SONARR_IP_ADDRESS}
    dns:
      - ${PIHOLE_IP_ADDRESS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`tvshows.${DOMAIN}`)
      - traefik.http.routers.sonarr.tls.certresolver=certificato
      - traefik.http.routers.sonarr.entrypoints=web,web-secure
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - homepage.group=HeavyMetal
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.widget.type=sonarr
      - homepage.widget.url=https://tvshows.${DOMAIN}
      - homepage.widget.key=${SONARR_API_KEY}
      - homepage.widget.fields=["wanted", "queued", "series"]
    depends_on:
      - traefik

  radarr:
    image: lscr.io/linuxserver/radarr:nightly
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/radarr:/config
      - ${MOVIES}:/media/Movies
      - ${TORRENTS}:/downloads #optional
    networks:
      01-transit_80-net:
        ipv4_address: ${RADARR_IP_ADDRESS}
    dns:
      - ${PIHOLE_IP_ADDRESS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`movies.${DOMAIN}`)
      - traefik.http.routers.radarr.tls.certresolver=certificato
      - traefik.http.routers.radarr.entrypoints=web,web-secure
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - homepage.group=HeavyMetal
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.widget.type=radarr
      - homepage.widget.url=https://movies.${DOMAIN}
      - homepage.widget.key=${RADARR_API_KEY}
      - homepage.widget.fields=["wanted", "missing", "queued", "movies"]
    depends_on:
      - traefik

  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    # image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    hostname: flaresolverr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    networks:
      01-transit_80-net:
        ipv4_address: ${FLARESOLVERR_IP_ADDRESS}
    dns:
      - ${PIHOLE_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.${DOMAIN}`)"
      - "traefik.http.routers.flaresolverr.tls.certresolver=certificato"
      - "traefik.http.routers.flaresolverr.entrypoints=web,web-secure"
      - "traefik.http.services.flaresolverr.loadbalancer.server.port=8191"
    depends_on:
      - traefik

  prowlarr:
    image: linuxserver/prowlarr:develop
    container_name: prowlarr
    hostname: prowlarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
      # - RUN_OPTS=<run options here> #optional
    volumes:
      - ${DATA_STORAGE}/prowlarr:/config
    networks:
      01-transit_80-net:
        ipv4_address: ${PROWLARR_IP_ADDRESS}
    dns:
      - ${PIHOLE_IP_ADDRESS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)
      - traefik.http.routers.prowlarr.tls.certresolver=certificato
      - traefik.http.routers.prowlarr.entrypoints=web,web-secure
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      - homepage.group=HeavyMetal
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=https://prowlarr.${DOMAIN}/
      - homepage.description=Prowlarr
      - homepage.widget.type=prowlarr
      - homepage.widget.key=${PROWLARR_API_KEY}
      - homepage.widget.url=https://prowlarr.${DOMAIN}
      - homepage.widget.fields=["enableIndexers", "numberOfGrabs", "numberOfQueries", "numberOfFailGrabs", "numberOfFailQueries"]
    depends_on:
      - traefik
      - flaresolverr

  plex:
    image: linuxserver/plex:latest
    container_name: plex-movietvshow
    hostname: plex-movietvshow
    restart: unless-stopped
    environment:
      - PLEX_UID=33
      - PLEX_GID=33
      - PUID=33
      - PGID=33
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - TZ=${TZ}
      - ALLOWED_NETWORKS=${PLEX_ALLOWED_NETWORKS}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      - HOSTNAME=plex.${DOMAIN}
    volumes:
      - ${DATA_STORAGE}/plex/config:/config
      - ${TVSHOWS}:/media/Series
      - ${MOVIES}:/media/Movies
      - ${MUSIC}:/media/Music
      - ${PLEX_USER1_VOLUME_MOUNT}
      - ${PLEX_USER2_VOLUME_MOUNT}
    networks:
      01-transit_80-net:
        ipv4_address: ${PLEX_MOVIETVSHOW_IP_ADDRESS}
    dns:
      - ${PIHOLE_IP_ADDRESS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex.rule=Host(`plex.${DOMAIN}`)
      - traefik.http.routers.plex.tls.certresolver=certificato
      - traefik.http.routers.plex.entrypoints=web,web-secure
      - traefik.http.services.plex.loadbalancer.server.port=32400
      - homepage.group=HeavyMetal
      - homepage.weight=1
      - homepage.name=Plex Movies
      - homepage.icon=plex.png
      - homepage.href=https://plex.${DOMAIN}/
      - homepage.description=Plex server for Movies and tvshows
      - homepage.widget.type=plex
      - homepage.widget.url=http://${PLEX_MOVIETVSHOW_IP_ADDRESS}:32400
      - homepage.widget.key=${PLEX_MOVIETVSHOW_TOKEN}      
    depends_on:
      - traefik

  imaginary:
    image: nextcloud/aio-imaginary:latest
    command: -concurrency 50 -enable-url-source -log-level debug
    container_name: "imaginary"
    restart: unless-stopped
    environment:
       PORT: 9000
    ports:
      - "9000:9000"
    networks:
      - internal-net

  redis:
    image: redis:6
    container_name: "redis"
    restart: unless-stopped
    volumes:
      - ${DATA_STORAGE}/redis:/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - internal-net

  nextcloud-db:
    image: mariadb
    container_name: "nextcloud-db"
    restart: unless-stopped
    networks:
      - internal-net
    expose:
      - "3306"
    command: --verbose --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed
    volumes:
      - ${NEXTCLOUD_DATA}/db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${NEXTCLOUD_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${NEXTCLOUD_PASSWORD}
      - MYSQL_DATABASE=nextcloud-private
      - MYSQL_USER=nextcloud-user

  nextcloud:
    image: jhnrn/nextcloud-linux
    container_name: nextcloud
    hostname: nextcloud
    restart: unless-stopped
    links:
      - nextcloud-db
    volumes:
      - ${NEXTCLOUD_DATA}/html:/var/www/html
      - ${NEXTCLOUD_DATA}/data:/var/www/html/data
      - ${NEXTCLOUD_DATA}/tmp/app:/tmp
      - ${NEXTCLOUD_DATA}/php/conf.d:/usr/local/etc/php/conf.d
    environment:
      - MYSQL_PASSWORD=${NEXTCLOUD_PASSWORD}
      - MYSQL_DATABASE=nextcloud-private
      - MYSQL_USER=nextcloud-user
      - MYSQL_HOST=nextcloud-db
      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.${DOMAIN}
      - REDIS_HOST=redis
      - NEXTCLOUD_HOSTNAME=${NEXTCLOUD_HOSTNAME}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - OVERWRITEPROTOCOL=https
      - OVERWRITECLIURL=https://nextcloud.${DOMAIN}
      - OVERWRITEHOST=nextcloud.${DOMAIN}
      - PUID=33
      - PGID=33
      - PHP_MEMORY_LIMIT=8G
      - PHP_UPLOAD_LIMIT=20G
    networks:
      01-transit_80-net:
        ipv4_address: ${NEXTCLOUD_IP_ADDRESS}
      internal-net:
    dns:
      - ${PIHOLE_IP_ADDRESS}
    labels:
      - ofelia.enabled=true
      - ofelia.job-exec.nextcloud_scan.schedule=@every 1h30m
      - ofelia.job-exec.nextcloud_scan.user=33
      - ofelia.job-exec.nextcloud_scan.command=php occ files:scan --all
      - ofelia.job-exec.nextcloud_cron.schedule=@every 5m
      - ofelia.job-exec.nextcloud_cron.user=33
      - ofelia.job-exec.nextcloud_cron.command=php -f /var/www/html/cron.php
      - traefik.enable=true
      - traefik.http.routers.nextcloud.rule=Host(`nextcloud.${DOMAIN}`)
      - traefik.http.routers.nextcloud.tls.certresolver=certificato
      - traefik.http.routers.nextcloud.entrypoints=web,web-secure
      - traefik.http.services.nextcloud.loadbalancer.server.port=80
      # traefik.http.middlewares.nextcloud-limit.buffering.maxRequestBodyBytes: 16777216 # 16 GBytes
      # traefik.http.middlewares.nextcloud-limit.buffering.memRequestBodyBytes: 16777216 # 16 GBytes
      # traefik.http.middlewares.nextcloud-limit.buffering.maxResponseBodyBytes: 16777216 # 16 GBytes
      # traefik.http.middlewares.nextcloud-limit.buffering.memResponseBodyBytes: 16777216 # 16 GBytes
      - traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.regex=https?://([^/]*)/.well-known/(card|cal)dav
      - traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.replacement=https://$${1}/remote.php/dav
      - traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.regex=https?://([^/]*)/.well-known/webfinger
      - traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.replacement=https://$${1}/index.php/.well-known/webfinger/
      - traefik.http.middlewares.nextcloud-redirectregex3.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud-redirectregex3.redirectregex.regex=https?://([^/]*)/.well-known/nodeinfo
      - traefik.http.middlewares.nextcloud-redirectregex3.redirectregex.replacement=https://$${1}/index.php/.well-known/nodeinfo/
      - traefik.http.middlewares.nextcloud-redirectregex4.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud-redirectregex4.redirectregex.regex=https?://([^/]*)(/.well-known[^#]*)
      - traefik.http.middlewares.nextcloud-redirectregex4.redirectregex.replacement=https://$${1}/index.php$${2}
      - traefik.http.middlewares.nextcloud-hsts.headers.stsSeconds=31536000
      - traefik.http.routers.nextcloud.middlewares=nextcloud-hsts,nextcloud-redirectregex1,nextcloud-redirectregex2,nextcloud-redirectregex3,nextcloud-redirectregex4
      - traefik.docker.network=heavymetal-services_01-transit_80-net
      - homepage.group=HeavyMetal
      - homepage.name=Nextcloud
      - homepage.icon=nextcloud.png
      - homepage.widget.type=nextcloud
      - homepage.widget.url=https://nextcloud.${DOMAIN}
      # - homepage.widget.username=${NEXTCLOUD_APP_USERNAME}
      # - homepage.widget.password=${NEXTCLOUD_APP_PASSWORD}
      - homepage.widget.key=${NEXTCLOUD_TOKEN}   #  You can generate the token with "php occ config:app:set serverinfo token --value yourtoken
      - homepage.widget.fields=["cpuload", "memoryusage", "freespace", "activeusers"]

    depends_on:
      - traefik
      - nextcloud-db
      - redis

  photoprism:
    image: photoprism/photoprism:latest
    container_name: photoprism
    hostname: photoprism
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    environment:
      PHOTOPRISM_ADMIN_PASSWORD: ${PHOTOPRISM_ADMIN_PASSWORD} # PLEASE CHANGE: Your initial admin password (min 4 characters)
      PHOTOPRISM_SITE_URL: ${PHOTOPRISM_SITE_URL} # Public server URL incl http:// or https:// and /path, :port is optional
      PHOTOPRISM_ORIGINALS_LIMIT: 5000 # File size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip" # Improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_DEBUG: "false" # Run in debug mode (shows additional log messages)
      PHOTOPRISM_PUBLIC: "false" # No authentication required (disables password protection)
      PHOTOPRISM_READONLY: "false" # Don't modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false" # Enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "true" # Disables storage permission updates on startup
      PHOTOPRISM_DISABLE_WEBDAV: "false" # Disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false" # Disables Settings in Web UI
      PHOTOPRISM_DISABLE_TENSORFLOW: "false" # Disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false" # Disables facial recognition
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false" # Disables image classification
      PHOTOPRISM_DARKTABLE_PRESETS: "false" # Enables Darktable presets and disables concurrent RAW conversion
      PHOTOPRISM_DETECT_NSFW: "false" # Flag photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true" # Allow uploads that MAY be offensive
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      PHOTOPRISM_DATABASE_DRIVER: "mysql" # Use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "photoprism-mariadb:3306" # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism" # MariaDB or MySQL database schema name
      PHOTOPRISM_DATABASE_USER: "photoprism" # MariaDB or MySQL database user name
      PHOTOPRISM_DATABASE_PASSWORD: ${PHOTOPRISM_DATABASE_PASSWORD} # MariaDB or MySQL database user password
      PHOTOPRISM_SITE_TITLE: "PhotoPrism"
      PHOTOPRISM_SITE_CAPTION: "Browse Your Life"
      PHOTOPRISM_SITE_DESCRIPTION: ""
      PHOTOPRISM_SITE_AUTHOR: ""
      PHOTOPRISM_THUMB_FILTER: "blackman"      # resample filter, best to worst: blackman, lanczos, cubic, linear
      PHOTOPRISM_THUMB_UNCACHED: "true"       # enables on-demand thumbnail rendering (high memory and cpu usage)
      PHOTOPRISM_THUMB_SIZE: 2048             # pre-rendered thumbnail size limit (default 2048, min 720, max 7680)
      # PHOTOPRISM_THUMB_SIZE: 4096           # retina 4K, DCI 4K (requires more storage); 7680 for 8K Ultra HD
      PHOTOPRISM_THUMB_SIZE_UNCACHED: 7680    # on-demand rendering size limit (default 7680, min 720, max 7680)
      PHOTOPRISM_JPEG_SIZE: 7680              # size limit for converted image files in pixels (720-30000)
      PHOTOPRISM_JPEG_QUALITY: 85             # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
      ## Enable TensorFlow AVX2 support for modern Intel CPUs (requires starting the container as root):
      # PHOTOPRISM_INIT: "tensorflow-amd64-avx2"
      ## Hardware video transcoding config (optional):
      # PHOTOPRISM_FFMPEG_BUFFERS: "64"              # FFmpeg capture buffers (default: 32)
      # PHOTOPRISM_FFMPEG_BITRATE: "32"              # FFmpeg encoding bitrate limit in Mbit/s (default: 50)
      # PHOTOPRISM_FFMPEG_ENCODER: "h264_v4l2m2m"    # Use Video4Linux for AVC transcoding (default: libx264)
      # PHOTOPRISM_FFMPEG_ENCODER: "h264_qsv"        # Use Intel Quick Sync Video for AVC transcoding (default: libx264)
      # PHOTOPRISM_INIT: "intel-graphics tensorflow-amd64-avx2" # Enable TensorFlow AVX2 & Intel Graphics support
      HOME: "/photoprism"
    ## Hardware devices for video transcoding and machine learning (optional):
    # devices:
    #  - "/dev/video11:/dev/video11" # Video4Linux (h264_v4l2m2m)
    #  - "/dev/dri/renderD128:/dev/dri/renderD128" # Intel GPU
    #  - "/dev/dri/card0:/dev/dri/card0"
    working_dir: "/photoprism"
    volumes:
      ## The *originals* folder contains your original photo and video files (- "[host folder]:/photoprism/originals"):
      - ${PHOTOPRISM_USER1_VOLUME_MOUNT}
      - ${PHOTOPRISM_USER2_VOLUME_MOUNT}
      ## You may mount an *import* folder from which files can be transferred to *originals* (optional):
      # - "~/Import:/photoprism/import"
      ## Cache, session, thumbnail, and sidecar files will be created in the *storage* folder (never remove):
      - ${DATA_STORAGE}/photoprism/storage:/photoprism/storage
    networks:
      internal-net:
    dns:
      - ${PIHOLE_IP_ADDRESS}
    labels:
      ofelia.enabled: true
      ofelia.job-exec.photoprism_index.schedule: "@every 1h"
      ofelia.job-exec.photoprism_index.command: "photoprism index --cleanup"
      traefik.enable: true
      traefik.http.routers.photoprism.rule: "Host(`photoprism.${DOMAIN}`)"
      traefik.http.routers.photoprism.tls.certresolver: "certificato"
      traefik.http.routers.photoprism.entrypoints: "web,web-secure"
      traefik.http.services.photoprism.loadbalancer.server.port: 2342
    depends_on:
      - traefik
      - photoprism-mariadb

  photoprism-mariadb:
    restart: unless-stopped
    container_name: "photoprism-db"
    image: mariadb:10.6
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    networks:
      - internal-net
    command: mysqld --innodb-buffer-pool-size=256M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    ## Never store database files on an unreliable device such as a USB flash drive or a shared network folder:
    volumes:
      - ${DATA_STORAGE}/photoprism/db:/var/lib/mysql # Important, don't remove
    environment:
      MYSQL_ROOT_PASSWORD: ${PHOTOPRISM_ROOT_DATABASE_PASSWORD}
      MYSQL_DATABASE: photoprism
      MYSQL_USER: photoprism
      MYSQL_PASSWORD: ${PHOTOPRISM_DATABASE_PASSWORD}

  ## Ofelia Job Runner (recommended for running background jobs)
  ## see https://github.com/mcuadros/ofelia
  ofelia:
    restart: unless-stopped
    image: mcuadros/ofelia:latest
    container_name: ofelia
    network_mode: none
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - photoprism
      - nextcloud

  gogs:
    image: "gogs/gogs:latest"
    container_name: "gogs"
    hostname: "gogs"
    restart: "always"
    environment:
      RUN_CROND: true
      SSH_PORT: "22"
    volumes:
      - ${DATA_STORAGE}/gogs/data:/data
      - ${DATA_STORAGE}/gogs/backup:/backup
    networks:
      internal-net:
    dns:
      - ${PIHOLE_IP_ADDRESS}
    labels:
      traefik.enable: true
      traefik.http.routers.gogs.rule: "Host(`git.${DOMAIN}`)"
      traefik.http.routers.gogs.tls.certresolver: "certificato"
      traefik.http.routers.gogs.entrypoints: "web,web-secure"
      traefik.http.services.gogs.loadbalancer.server.port: 3000
      traefik.tcp.routers.gogs-ssh.rule: HostSNI(`*`)
      traefik.tcp.routers.gogs-ssh.entrypoints: ssh
      traefik.tcp.routers.gogs-ssh.service: gogs-ssh
      traefik.tcp.services.gogs-ssh.loadbalancer.server.port: 22      
    depends_on:
      - gogs-mariadb
      - traefik

  gogs-mariadb:
    image: "mariadb:latest"
    container_name: "gogs-mariadb"
    restart: "always"
    environment:
      MYSQL_DATABASE: "gogs"
      MYSQL_PASSWORD: ${GOGS_DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${GOGS_DATABASE_ROOT_PASSWORD}
      MYSQL_USER: "gogs"
    volumes:
      - ${DATA_STORAGE}/gogs/db:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - internal-net

  proxmox-heavymetal-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: proxmox-heavymetal-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=Hardware
      - homepage.weight=2
      - homepage.name=Proxmox (heavymetal)
      - homepage.icon=proxmox.png
      - homepage.widget.type=proxmox
      - homepage.widget.url=https://${HEAVYMETAL_SERVICES_IP_ADDRESS}:8006
      - homepage.widget.username=${HEAVYMETAL_SERVICES_PROXMOX_TOKEN_ID}
      - homepage.widget.password=${HEAVYMETAL_SERVICES_PROXMOX_TOKEN_SECRET}
      - homepage.widget.fields=["vms", "lxc", "resources.cpu", "resources.mem"]      

  glances:
    image: nicolargo/glances:dev
    container_name: glances
    restart: unless-stopped
    pid: host
    privileged: true
    networks:
      01-transit_80-net:
        ipv4_address: ${GLANCES_IP_ADDRESS}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ${DATA_STORAGE}/glances/glances.conf:/glances/conf/glances.conf
    environment:
      - GLANCES_OPT=-C /glances/conf/glances.conf -w
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.glances.rule=Host(`glances.${DOMAIN}`)
      - traefik.http.routers.glances.tls.certresolver=certificato
      - traefik.http.routers.glances.entrypoints=web,web-secure
      - traefik.http.services.glances.loadbalancer.server.port=61208

  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    environment:
      - PUID=33                                                                                                 
      - PGID=33                                                                                                 
      - TZ=${TZ}
      - COLLECTOR_API_ENDPOINT=http://localhost:8080 
    # ports:
    #   - "8080:8080" # webapp
    #   - "8086:8086" # influxDB admin
    volumes:
      - /run/udev:/run/udev:ro
      - ${DATA_STORAGE}/scrutiny/config:/opt/scrutiny/config
      - ${DATA_STORAGE}/scrutiny/influxdb:/opt/scrutiny/influxdb
    networks:
      01-transit_80-net:
        ipv4_address: ${SCRUTINY_IP_ADDRESS}   
    devices:
      - "/dev/sda"
      - "/dev/sdb"
      - "/dev/sdc"
      - "/dev/sdd"
      - "/dev/sde"
      - "/dev/sdf"
      - "/dev/sdg"
      - "/dev/sdh"
      - "/dev/sdi"
      - "/dev/sdj"
      - "/dev/sdk"
      - "/dev/sdl"
      - "/dev/sdm"
      - "/dev/sdn"
      - "/dev/nvme2n1"
      - "/dev/nvme1n1"    
    labels:
      - traefik.enable=true
      - traefik.http.routers.scrutiny.rule=Host(`drive.${DOMAIN}`)
      - traefik.http.routers.scrutiny.tls.certresolver=certificato
      - traefik.http.routers.scrutiny.entrypoints=web,web-secure
      - traefik.http.services.scrutiny.loadbalancer.server.port=8080
      - homepage.group=Hardware
      - homepage.weight=3
      - homepage.name=Disk health (heavymetal)
      - homepage.icon=scrutiny.png
      - homepage.widget.type=scrutiny
      - homepage.widget.url=https://drive.${DOMAIN}
      - homepage.widget.fields=["passed", "failed", "unknown"]

  nextcloud-private-db:
    image: mariadb
    container_name: "nextcloud-private-db"
    restart: unless-stopped
    networks:
      - internal-net
    expose:
      - "3306"
    command: --verbose --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed
    volumes:
      - ${NEXTCLOUD_PRIVATE_DATA}/db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${NEXTCLOUD_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${NEXTCLOUD_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud-private-user

  nextcloud-private:
    image: jhnrn/nextcloud-linux
    container_name: nextcloud-private
    hostname: nextcloud-private
    restart: unless-stopped
    links:
      - nextcloud-private-db
    volumes:
      - ${NEXTCLOUD_PRIVATE_DATA}/html:/var/www/html
      - ${NEXTCLOUD_PRIVATE_DATA}/data:/var/www/html/data
    environment:
      - MYSQL_PASSWORD=${NEXTCLOUD_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud-private-user
      - MYSQL_HOST=nextcloud-private-db
      - NEXTCLOUD_TRUSTED_DOMAINS=private.${DOMAIN}
      - REDIS_HOST=redis
      - NEXTCLOUD_HOSTNAME=nextcloud-private
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - OVERWRITEPROTOCOL=https
      - OVERWRITECLIURL=https://private.${DOMAIN}
      - OVERWRITEHOST=private.${DOMAIN}
      - PUID=33
      - PGID=33
      - PHP_MEMORY_LIMIT=8G
      - PHP_UPLOAD_LIMIT=20G
    networks:
      01-transit_80-net:
        ipv4_address: ${NEXTCLOUD_PRIVATE_IP_ADDRESS}
      internal-net:
    dns:
      - ${PIHOLE_IP_ADDRESS}
    labels:
      - ofelia.enabled=true
      - ofelia.job-exec.nextcloud_scan.schedule=@every 1h30m
      - ofelia.job-exec.nextcloud_scan.user=33
      - ofelia.job-exec.nextcloud_scan.command=php occ files:scan --all
      - ofelia.job-exec.nextcloud_cron.schedule=@every 5m
      - ofelia.job-exec.nextcloud_cron.user=33
      - ofelia.job-exec.nextcloud_cron.command=php -f /var/www/html/cron.php
      - traefik.enable=true
      - traefik.http.routers.nextcloud-private.rule=Host(`private.${DOMAIN}`)
      - traefik.http.routers.nextcloud-private.tls.certresolver=certificato
      - traefik.http.routers.nextcloud-private.entrypoints=web,web-secure
      - traefik.http.services.nextcloud-private.loadbalancer.server.port=80
      # traefik.http.middlewares.nextcloud-private-limit.buffering.maxRequestBodyBytes: 16777216 # 16 GBytes
      # traefik.http.middlewares.nextcloud-private-limit.buffering.memRequestBodyBytes: 16777216 # 16 GBytes
      # traefik.http.middlewares.nextcloud-private-limit.buffering.maxResponseBodyBytes: 16777216 # 16 GBytes
      # traefik.http.middlewares.nextcloud-private-limit.buffering.memResponseBodyBytes: 16777216 # 16 GBytes
      - traefik.http.middlewares.nextcloud-private-redirectregex1.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud-private-redirectregex1.redirectregex.regex=https?://([^/]*)/.well-known/(card|cal)dav
      - traefik.http.middlewares.nextcloud-private-redirectregex1.redirectregex.replacement=https://$${1}/remote.php/dav
      - traefik.http.middlewares.nextcloud-private-redirectregex2.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud-private-redirectregex2.redirectregex.regex=https?://([^/]*)/.well-known/webfinger
      - traefik.http.middlewares.nextcloud-private-redirectregex2.redirectregex.replacement=https://$${1}/index.php/.well-known/webfinger/
      - traefik.http.middlewares.nextcloud-private-redirectregex3.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud-private-redirectregex3.redirectregex.regex=https?://([^/]*)/.well-known/nodeinfo
      - traefik.http.middlewares.nextcloud-private-redirectregex3.redirectregex.replacement=https://$${1}/index.php/.well-known/nodeinfo/
      - traefik.http.middlewares.nextcloud-private-redirectregex4.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud-private-redirectregex4.redirectregex.regex=https?://([^/]*)(/.well-known[^#]*)
      - traefik.http.middlewares.nextcloud-private-redirectregex4.redirectregex.replacement=https://$${1}/index.php$${2}
      - traefik.http.middlewares.nextcloud-private-hsts.headers.stsSeconds=31536000
      - traefik.http.routers.private.middlewares=nextcloud-private-hsts,nextcloud-private-redirectregex1,nextcloud-private-redirectregex2,nextcloud-private-redirectregex3,nextcloud-private-redirectregex4
      - traefik.docker.network=heavymetal-services_01-transit_80-net
      - homepage.group=HeavyMetal
      - homepage.name=Nextcloud-private
      - homepage.icon=nextcloud.png
      - homepage.widget.type=nextcloud
      - homepage.widget.url=https://private.${DOMAIN}
      # - homepage.widget.username=${NEXTCLOUD_APP_USERNAME}
      # - homepage.widget.password=${NEXTCLOUD_APP_PASSWORD}
      - homepage.widget.key=${NEXTCLOUD_PRIVATE_TOKEN}   #  You can generate the token with "php occ config:app:set serverinfo token --value yourtoken
      - homepage.widget.fields=["cpuload", "memoryusage", "freespace", "activeusers"]

    depends_on:
      - traefik
      - nextcloud-private-db
      - redis
