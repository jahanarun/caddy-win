version: "3.9"

name: heavymetal-services
networks:
  networks_vlan_20:
    external: true
  networks_vlan_80:
    external: true
  networks_traefik_proxy:
    external: true
  networks_metrics:
    external: true

services:
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
        - CONTAINERS=1 # Allow access to viewing containers
        - POST=0 # Disallow any POST operations (effectively read-only)
    # ports:
    #     - 2375:2375
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    networks:
      networks_vlan_80:
        ipv4_address: ${HEAVYMETAL_DOCKERPROXY_IP_ADDRESS}
    restart: unless-stopped

  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--api.dashboard=true"
      - "--providers.docker.endpoint=tcp://dockerproxy:2375"
      - "--providers.file.directory=/FileProvider/"
      - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.web-secure.forwardedHeaders.trustedIPs=${TRUSTED_IPS}"
      - "--entrypoints.ssh.address=:22"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=postmaster@${DOMAIN}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
    networks:
      networks_metrics:
      networks_traefik_proxy:
      networks_vlan_80:
        ipv4_address: ${TRAEFIK_IP_ADDRESS_2}
    dns:
      - 1.1.1.1
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`reverse1.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - homepage.group=HeavyMetal
      - homepage.name=Traefik
      - homepage.weight=1000
      - homepage.description=for HeavyMetal
      - homepage.icon=traefik.png
      - homepage.href=https://reverse1.${DOMAIN}
      - homepage.widget.type=traefik
      - homepage.widget.url=https://reverse1.${DOMAIN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro  
      - ${DATA_STORAGE}/traefik/certs:/letsencrypt
      - ${DATA_STORAGE}/traefik/dynamic:/FileProvider
    restart: always
    depends_on:
      - dockerproxy
    healthcheck: # This is to announce to the network (router and switch) that this ip address is sitting here
      test: traefik healthcheck --ping && ping -c 1 bing.com || exit 1
      interval: 30s
      retries: 5

  cloudflared-tunnel:
    image: jhnrn/cloudflared:latest
    container_name: "cloudflared-tunnel"
    hostname: cloudflared-tunnel
    user: $PUID:$PGID
    restart: always
    networks:
      networks_vlan_80:
    dns:
      - ${METAL_PIHOLE_IP_ADDRESS}
    environment:
      TZ: ${TZ}
      TUNNEL_METRICS: "0.0.0.0:${CLOUDFARED_METRICS_PORT}"
    command:
      - tunnel
      - --no-autoupdate
      - run 
      - --token
      - ${HEAVYMETAL_CLOUDFARED_TOKEN}
    labels:
      - homepage.group=Network
      - homepage.weight=2000
      - homepage.name=Cloudflared tunnel
      - homepage.description=for HeavyMetal
      - homepage.icon=cloudflare-zero-trust.png
      - homepage.widget.type=cloudflared
      - homepage.widget.accountid=${CLOUDFLARED_TUNNEL_ACCOUNTID}
      - homepage.widget.tunnelid=${CLOUDFLARED_TUNNEL_TUNNELID_2}
      - homepage.widget.key=${CLOUDFLARE_TUNNEL_API_READ_TOKEN}      
    healthcheck:
      test: curl -sSf 'http://localhost:${CLOUDFARED_METRICS_PORT}/healthcheck' || exit 1
      interval: 10s
      timeout: 5s
      retries: 10

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/sonarr:/config
      - ${TVSHOWS}:/media/Series #optional
      - ${TORRENTS}:/downloads #optional
    networks:
      networks_vlan_80:
      networks_traefik_proxy:
    dns:
      - ${METAL_PIHOLE_IP_ADDRESS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`tvshows.${DOMAIN}`)
      - traefik.http.routers.sonarr.tls.certresolver=certificato
      - traefik.http.routers.sonarr.entrypoints=web,web-secure
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - traefik.docker.network=networks_traefik_proxy
      - homepage.group=HeavyMetal
      - homepage.weight=6000
      - homepage.name=Sonarr
      - homepage.description=for tvshows
      - homepage.icon=sonarr.png
      - homepage.href=https://tvshows.${DOMAIN}/
      - homepage.widget.type=sonarr
      - homepage.widget.url=https://tvshows.${DOMAIN}
      - homepage.widget.key=${SONARR_API_KEY}
      # - homepage.widget.fields=["wanted", "queued", "series"]

  radarr:
    image: lscr.io/linuxserver/radarr:nightly
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    environment:
      - PUID=33
      - PGID=33
      - TZ=${TZ}
    volumes:
      - ${DATA_STORAGE}/radarr:/config
      - ${MOVIES}:/media/Movies
      - ${TORRENTS}:/downloads #optional
    networks:
      networks_traefik_proxy:
      networks_vlan_80:
    dns:
      - ${METAL_PIHOLE_IP_ADDRESS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`movies.${DOMAIN}`)
      - traefik.http.routers.radarr.tls.certresolver=certificato
      - traefik.http.routers.radarr.entrypoints=web,web-secure
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - homepage.group=HeavyMetal
      - traefik.docker.network=networks_traefik_proxy
      - homepage.name=Radarr
      - homepage.weight=7000
      - homepage.description=for movies
      - homepage.icon=radarr.png
      - homepage.href=https://movies.${DOMAIN}/
      - homepage.widget.type=radarr
      - homepage.widget.url=https://movies.${DOMAIN}
      - homepage.widget.key=${RADARR_API_KEY}
      # - homepage.widget.fields=["wanted", "missing", "queued", "movies"]

  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    # image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    hostname: flaresolverr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    networks:
      networks_vlan_80:
      networks_traefik_proxy:
    dns:
      - ${METAL_PIHOLE_IP_ADDRESS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.${DOMAIN}`)"
      - "traefik.http.routers.flaresolverr.tls.certresolver=certificato"
      - "traefik.http.routers.flaresolverr.entrypoints=web,web-secure"
      - "traefik.http.services.flaresolverr.loadbalancer.server.port=8191"
      - traefik.docker.network=networks_traefik_proxy

  prowlarr:
    image: linuxserver/prowlarr:develop
    container_name: prowlarr
    hostname: prowlarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
      # - RUN_OPTS=<run options here> #optional
    volumes:
      - ${DATA_STORAGE}/prowlarr:/config
    networks:
      networks_vlan_80:
      networks_traefik_proxy:
    dns:
      - ${METAL_PIHOLE_IP_ADDRESS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)
      - traefik.http.routers.prowlarr.tls.certresolver=certificato
      - traefik.http.routers.prowlarr.entrypoints=web,web-secure
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      - traefik.docker.network=networks_traefik_proxy
      - homepage.group=HeavyMetal
      - homepage.weight=5000
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=https://prowlarr.${DOMAIN}/
      - homepage.description=Prowlarr
      - homepage.widget.type=prowlarr
      - homepage.widget.key=${PROWLARR_API_KEY}
      - homepage.widget.url=https://prowlarr.${DOMAIN}
      # - homepage.widget.fields=["enableIndexers", "numberOfGrabs", "numberOfQueries", "numberOfFailGrabs", "numberOfFailQueries"]
    depends_on:
      - flaresolverr

  plex-movietvshow:
    image: plexinc/pms-docker:plexpass
    container_name: plex-movietvshow
    hostname: plex-movietvshow
    restart: unless-stopped
    environment:
      - PLEX_UID=33
      - PLEX_GID=33
      - PUID=33
      - PGID=33
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - TZ=${TZ}
      - ALLOWED_NETWORKS=${PLEX_ALLOWED_NETWORKS}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      - HOSTNAME=plex.${DOMAIN}
      - ROC_ENABLE_PRE_VEGA=1
    group_add:
      - "${RENDER_GROUP_ID}" # Change this to match your "render" host group id (getent group render)
      - "${VIDEO_GROUP_ID}" # Change this to match your "video" host group id (getent group video)
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/kfd:/dev/kfd # Remove this device if you don't use the OpenCL tone-mapping
    volumes:
      - ${DATA_STORAGE}/plex/config:/config
      - ${DATA_STORAGE}/plex/transcode:/transcode
      - ${TVSHOWS}:/media/Series
      - ${MOVIES}:/media/Movies
      - ${MUSIC}:/media/Music
      - ${PLEX_USER1_VOLUME_MOUNT}
      - ${PLEX_USER2_VOLUME_MOUNT}
    networks:
      networks_vlan_80:
        ipv4_address: ${PLEX_MOVIETVSHOW_IP_ADDRESS}
      networks_traefik_proxy:
    dns:
      - ${METAL_PIHOLE_IP_ADDRESS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex.rule=Host(`plex.${DOMAIN}`)
      - traefik.http.routers.plex.tls.certresolver=certificato
      - traefik.http.routers.plex.entrypoints=web,web-secure
      - traefik.http.services.plex.loadbalancer.server.port=32400
      - traefik.docker.network=networks_traefik_proxy
      - homepage.group=HeavyMetal
      - homepage.weight=2000
      - homepage.name=Plex
      - homepage.icon=plex.png
      - homepage.href=https://plex.${DOMAIN}/
      - homepage.description=for movies and tvshows
      - homepage.widget.type=plex
      - homepage.widget.url=http://${PLEX_MOVIETVSHOW_IP_ADDRESS}:32400
      - homepage.widget.key=${PLEX_MOVIETVSHOW_TOKEN}      
      - autoheal=true

  ## Ofelia Job Runner (recommended for running background jobs)
  ## see https://github.com/mcuadros/ofelia
  ofelia:
    restart: unless-stopped
    image: mcuadros/ofelia:latest
    container_name: ofelia
    network_mode: none
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  gogs:
    image: "gogs/gogs:latest"
    container_name: "gogs"
    hostname: "gogs"
    restart: "always"
    # user: ${UID}:${GID}
    environment:
      RUN_CROND: true
      SSH_PORT: "22"
    volumes:
      - ${DATA_STORAGE}/gogs/data:/data
      - ${DATA_STORAGE}/gogs/backup:/backup
    networks:
      networks_traefik_proxy:
    dns:
      - ${METAL_PIHOLE_IP_ADDRESS}
    labels:
      traefik.enable: true
      traefik.http.routers.gogs.rule: "Host(`git.${DOMAIN}`) || Host(`gogs.${DOMAIN}`)"
      traefik.http.routers.gogs.tls.certresolver: "certificato"
      traefik.http.routers.gogs.entrypoints: "web,web-secure"
      traefik.http.services.gogs.loadbalancer.server.port: 3000
      traefik.tcp.routers.gogs-ssh.rule: HostSNI(`*`)
      traefik.tcp.routers.gogs-ssh.entrypoints: ssh
      traefik.tcp.routers.gogs-ssh.service: gogs-ssh
      traefik.tcp.services.gogs-ssh.loadbalancer.server.port: 22      
    depends_on:
      - gogs-mariadb

  gogs-mariadb:
    image: "mariadb:latest"
    container_name: "gogs-mariadb"
    restart: "always"
    user: ${UID}:${GID}
    environment:
      MYSQL_DATABASE: "gogs"
      MYSQL_PASSWORD: ${GOGS_DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${GOGS_DATABASE_ROOT_PASSWORD}
      MYSQL_USER: "gogs"
    volumes:
      - ${DATA_STORAGE}/gogs/db:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - networks_traefik_proxy

  proxmox-heavymetal-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: proxmox-heavymetal-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=Hardware
      - homepage.weight=2000
      - homepage.name=Proxmox
      - homepage.description=for HeavyMetal
      - homepage.icon=proxmox.png
      - homepage.href=https://${HEAVYMETAL_SERVICES_IP_ADDRESS}:8006
      - homepage.widget.type=proxmox
      - homepage.widget.url=https://${HEAVYMETAL_SERVICES_IP_ADDRESS}:8006
      - homepage.widget.username=${HEAVYMETAL_SERVICES_PROXMOX_TOKEN_ID}
      - homepage.widget.password=${HEAVYMETAL_SERVICES_PROXMOX_TOKEN_SECRET}
      # - homepage.widget.fields=["vms", "lxc", "resources.cpu", "resources.mem"]      

  glances:
    image: nicolargo/glances:latest-full
    container_name: glances
    restart: unless-stopped
    pid: host
    privileged: true
    networks:
      networks_vlan_80:
      networks_traefik_proxy:
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ${DATA_STORAGE}/glances/glances.conf:/glances/conf/glances.conf
    environment:
      - GLANCES_OPT=-C /glances/conf/glances.conf -w
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.glances.rule=Host(`glanceshm.${DOMAIN}`)
      - traefik.http.routers.glances.tls.certresolver=certificato
      - traefik.http.routers.glances.entrypoints=web,web-secure
      - traefik.http.services.glances.loadbalancer.server.port=61208
      - traefik.docker.network=networks_traefik_proxy

  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    restart: unless-stopped
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    environment:
      - PUID=33                                                                                                 
      - PGID=33                                                                                                 
      - TZ=${TZ}
      - COLLECTOR_API_ENDPOINT=http://localhost:8080 
    # ports:
    #   - "8080:8080" # webapp
    #   - "8086:8086" # influxDB admin
    volumes:
      - /run/udev:/run/udev:ro
      - ${DATA_STORAGE}/scrutiny/config:/opt/scrutiny/config
      - ${DATA_STORAGE}/scrutiny/influxdb:/opt/scrutiny/influxdb
    networks:
      networks_vlan_80:
      networks_traefik_proxy:
    devices:
      - '/dev/disk/by-id/ata-SPCC_Solid_State_Disk_AA000000000000000978'
      - '/dev/disk/by-id/ata-ST4000VN008-2DR166_ZDH11Y82'
      - '/dev/disk/by-id/ata-ST8000DM004-2CX188_WCT023RG'
      - '/dev/disk/by-id/ata-ST1000LM024_HN-M101MBB_S30CJ9EF277321'
      - '/dev/disk/by-id/ata-ST8000VN0022-2EL112_ZA1D94RY'
      - '/dev/disk/by-id/ata-ST4000VN008-2DR166_ZGY2HPJQ'
      - '/dev/disk/by-id/ata-ST4000NE001-3CR101_WRA01R0K'
      - '/dev/disk/by-id/ata-ST4000VN008-2DR166_ZGY97PHF'
      - '/dev/disk/by-id/ata-ST16000NT001-3LV101_ZR5EZQSY'
      - '/dev/disk/by-id/ata-ST4000VN008-2DR166_ZDH8E2ZN'
      - '/dev/disk/by-id/ata-ST4000VN008-2DR166_ZDH8CFHK'
      - '/dev/disk/by-id/ata-ST16000NT001-3LV101_ZR5EGXQ2'
      - '/dev/disk/by-id/nvme-SHGP31-1000GM_ANB5N481711705A13'
      - '/dev/disk/by-id/nvme-TEAM_TM8FP4004T_112307250491415'
      - '/dev/disk/by-id/nvme-Samsung_SSD_970_EVO_Plus_2TB_S6S2NS0T529178Z'
      - '/dev/disk/by-id/nvme-Samsung_SSD_970_EVO_Plus_2TB_S6S2NS0T528930J'
      - '/dev/disk/by-id/nvme-TEAM_TM8FP4004T_112307250491594'
    labels:
      - traefik.enable=true
      - traefik.http.routers.scrutiny.rule=Host(`drive.${DOMAIN}`)
      - traefik.http.routers.scrutiny.tls.certresolver=certificato
      - traefik.http.routers.scrutiny.entrypoints=web,web-secure
      - traefik.http.services.scrutiny.loadbalancer.server.port=8080
      - traefik.docker.network=networks_traefik_proxy
      - homepage.group=Hardware
      - homepage.weight=3000
      - homepage.name=Disk health
      - homepage.description=for HeavyMetal
      - homepage.icon=scrutiny.png
      - homepage.href=https://drive.${DOMAIN}
      - homepage.widget.type=scrutiny
      - homepage.widget.url=https://drive.${DOMAIN}
      # - homepage.widget.fields=["passed", "failed", "unknown"]

  netdata-heavymetal:
    image: netdata/netdata:edge
    container_name: netdata-heavymetal
    hostname: netdata-heavymetal
    pid: host
    restart: unless-stopped
    network_mode: host
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - ${DATA_STORAGE}/netdata-heavymetal/config:/etc/netdata
      - ${DATA_STORAGE}/netdata-heavymetal/lib:/var/lib/netdata
      - ${DATA_STORAGE}/netdata-heavymetal/cache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - NETDATA_CLAIM_TOKEN=${NETDATA_CLAIM_TOKEN}
      - NETDATA_CLAIM_URL=${NETDATA_CLAIM_URL}
      - NETDATA_CLAIM_ROOMS=${NETDATA_CLAIM_ROOMS}
    deploy:
      mode: global
    labels:
      - traefik.enable=true
      - traefik.http.routers.netdatahm.rule=Host(`netdatahm.${DOMAIN}`)
      - traefik.http.routers.netdatahm.tls.certresolver=certificato
      - traefik.http.routers.netdatahm.entrypoints=web,web-secure
      - traefik.http.services.netdatahm.loadbalancer.server.port=19999

  autoheal:
    image: jhnrn/docker-autoheal:latest
    container_name: "autoheal"
    restart: always
    environment:
      TZ: ${TZ}    
      AUTOHEAL_CONTAINER_LABEL: autoheal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    network_mode: none


  frigate:
    container_name: frigate
    # privileged: true # this may not be necessary for all setups
    restart: unless-stopped
    # image: ghcr.io/blakeblackshear/frigate:stable
    image: ghcr.io/harakas/frigate:latest-rocm
    # privileged: true
    shm_size: "256mb" # update for your cameras based on calculation above
    # user: ${UID}:${GID}
    group_add:
      - "${RENDER_GROUP_ID}" # Change this to match your "render" host group id (getent group render)
      - "${VIDEO_GROUP_ID}" # Change this to match your "video" host group id (getent group video)
    devices:
      # - /dev/bus/usb:/dev/bus/usb # passes the USB Coral, needs to be modified for other versions
      # - /dev/apex_0:/dev/apex_0 # passes a PCIe Coral, follow driver instructions here https://coral.ai/docs/m2/get-started/#2a-on-linux
      - /dev/dri
      - /dev/kfd # Remove this device if you don't use the OpenCL tone-mapping
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ${APPDATA}/frigate:/config
      - ${CAMERA_STORAGE}/frigate:/media/frigate
      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear
        target: /tmp/cache
        tmpfs:
          size: 1000000000
    networks:
      networks_traefik_proxy:
      networks_vlan_20:
    dns:
      - ${THINGS_PIHOLE_IP_ADDRESS}
    # ports:
    #   - "5000:5000"
    #   - "8554:8554" # RTSP feeds
    #   - "8555:8555/tcp" # WebRTC over tcp
    #   - "8555:8555/udp" # WebRTC over udp
    environment:
      FRIGATE_RTSP_PASSWORD: ${CAMERA_RTSP_PASSWORD}
      FRIGATE_RTSP_USER: ${CAMERA_RTSP_USER}
      NVIDIA_VISIBLE_DEVICES: void
      LIBVA_DRIVER_NAME: radeonsi
      HSA_OVERRIDE_GFX_VERSION: ${HSA_OVERRIDE_GFX_VERSION}
      DOWNLOAD_YOLOV8: ${DOWNLOAD_YOLOV8}
    labels:
      - traefik.enable=true
      - traefik.http.routers.frigate.rule=Host(`recorder.${DOMAIN}`)
      - traefik.http.routers.frigate.tls.certresolver=certificato
      - traefik.http.routers.frigate.entrypoints=web,web-secure
      - traefik.http.services.frigate.loadbalancer.server.port=5000
      - traefik.docker.network=networks_traefik_proxy
